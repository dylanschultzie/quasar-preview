syntax = "proto3";
package quasarlabs.quasarnode.qoracle.osmosis;

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "qoracle/osmosis/params.proto";
import "qoracle/osmosis/osmosis.proto";
import "osmosis/epochs/genesis.proto";
import "osmosis/mint/v1beta1/mint.proto";
import "osmosis/pool-incentives/v1beta1/incentives.proto";
import "osmosis/pool-incentives/v1beta1/query.proto";
import "osmosis/gamm/pool-models/balancer/balancerPool.proto";

option go_package = "github.com/quasarlabs/quasarnode/x/qoracle/osmosis/types";

// Query defines the gRPC querier service.
service Query {
    // Parameters queries the parameters of the module.
	rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
		option (google.api.http).get = "/quasarlabs/quasarnode/qoracle/osmosis/params";
	}

	// Queries the state of oracle requests.
	rpc State(QueryStateRequest) returns (QueryStateResponse) {
		option (google.api.http).get = "/quasarlabs/quasarnode/qoracle/osmosis/state";
	}

	// Queries latest fetched params from osmosis chain.
	rpc ChainParams(QueryChainParamsRequest) returns (QueryChainParamsResponse) {
		option (google.api.http).get = "/quasarlabs/quasarnode/qoracle/osmosis/chain_params";
	}

	// Queries latest fetched list of incentivized pools from osmosis.
	rpc IncentivizedPools(QueryIncentivizedPoolsRequest) returns (QueryIncentivizedPoolsResponse) {
		option (google.api.http).get = "/quasarlabs/quasarnode/qoracle/osmosis/incentivized_pools";
	}

	// Queries latest fetched list of pool details from osmosis.
	rpc Pools(QueryPoolsRequest) returns (QueryPoolsResponse) {
		option (google.api.http).get = "/quasarlabs/quasarnode/qoracle/osmosis/pools";
	}
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryStateRequest {
}

message QueryStateResponse {
	OsmosisRequestState params_request_state = 2 [(gogoproto.nullable) = false];
	OsmosisRequestState incentivized_pools_state = 3 [(gogoproto.nullable) = false];
	OsmosisRequestState pools_state = 4 [(gogoproto.nullable) = false];
}

message QueryChainParamsRequest {
}

message QueryChainParamsResponse {
	repeated .osmosis.epochs.v1beta1.EpochInfo epochs_info = 1 [(gogoproto.nullable) = false];
	repeated int64 lockable_durations = 2 [(gogoproto.casttype) = "time.Duration"];
	.osmosis.mint.v1beta1.Params mint_params = 3 [(gogoproto.nullable) = false];
	bytes mint_epoch_provisions = 4 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
	.osmosis.poolincentives.v1beta1.DistrInfo distr_info = 5 [(gogoproto.nullable) = false];
}

message QueryIncentivizedPoolsRequest {
}

message QueryIncentivizedPoolsResponse {
	repeated .osmosis.poolincentives.v1beta1.IncentivizedPool incentivized_pools = 1 [(gogoproto.nullable) = false];
}

message QueryPoolsRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryPoolsResponse {
	repeated .osmosis.gamm.v1beta1.Pool pools = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}