// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: qoracle/osmosis/osmosis.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types1 "github.com/quasarlabs/quasarnode/osmosis/epochs/types"
	types "github.com/quasarlabs/quasarnode/osmosis/pool-incentives/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OsmosisRequestState struct {
	PacketSequence  uint64 `protobuf:"varint,1,opt,name=packet_sequence,json=packetSequence,proto3" json:"packet_sequence,omitempty"`
	Acknowledged    bool   `protobuf:"varint,2,opt,name=acknowledged,proto3" json:"acknowledged,omitempty"`
	Failed          bool   `protobuf:"varint,3,opt,name=failed,proto3" json:"failed,omitempty"`
	UpdatedAtHeight int64  `protobuf:"varint,4,opt,name=updated_at_height,json=updatedAtHeight,proto3" json:"updated_at_height,omitempty"`
}

func (m *OsmosisRequestState) Reset()         { *m = OsmosisRequestState{} }
func (m *OsmosisRequestState) String() string { return proto.CompactTextString(m) }
func (*OsmosisRequestState) ProtoMessage()    {}
func (*OsmosisRequestState) Descriptor() ([]byte, []int) {
	return fileDescriptor_3481bb447417ce28, []int{0}
}
func (m *OsmosisRequestState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OsmosisRequestState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OsmosisRequestState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OsmosisRequestState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OsmosisRequestState.Merge(m, src)
}
func (m *OsmosisRequestState) XXX_Size() int {
	return m.Size()
}
func (m *OsmosisRequestState) XXX_DiscardUnknown() {
	xxx_messageInfo_OsmosisRequestState.DiscardUnknown(m)
}

var xxx_messageInfo_OsmosisRequestState proto.InternalMessageInfo

func (m *OsmosisRequestState) GetPacketSequence() uint64 {
	if m != nil {
		return m.PacketSequence
	}
	return 0
}

func (m *OsmosisRequestState) GetAcknowledged() bool {
	if m != nil {
		return m.Acknowledged
	}
	return false
}

func (m *OsmosisRequestState) GetFailed() bool {
	if m != nil {
		return m.Failed
	}
	return false
}

func (m *OsmosisRequestState) GetUpdatedAtHeight() int64 {
	if m != nil {
		return m.UpdatedAtHeight
	}
	return 0
}

type IncentivizedPools struct {
	IncentivizedPools []types.IncentivizedPool `protobuf:"bytes,1,rep,name=incentivized_pools,json=incentivizedPools,proto3" json:"incentivized_pools"`
}

func (m *IncentivizedPools) Reset()         { *m = IncentivizedPools{} }
func (m *IncentivizedPools) String() string { return proto.CompactTextString(m) }
func (*IncentivizedPools) ProtoMessage()    {}
func (*IncentivizedPools) Descriptor() ([]byte, []int) {
	return fileDescriptor_3481bb447417ce28, []int{1}
}
func (m *IncentivizedPools) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IncentivizedPools) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IncentivizedPools.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IncentivizedPools) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncentivizedPools.Merge(m, src)
}
func (m *IncentivizedPools) XXX_Size() int {
	return m.Size()
}
func (m *IncentivizedPools) XXX_DiscardUnknown() {
	xxx_messageInfo_IncentivizedPools.DiscardUnknown(m)
}

var xxx_messageInfo_IncentivizedPools proto.InternalMessageInfo

func (m *IncentivizedPools) GetIncentivizedPools() []types.IncentivizedPool {
	if m != nil {
		return m.IncentivizedPools
	}
	return nil
}

type EpochsInfo struct {
	EpochsInfo []types1.EpochInfo `protobuf:"bytes,1,rep,name=epochs_info,json=epochsInfo,proto3" json:"epochs_info"`
}

func (m *EpochsInfo) Reset()         { *m = EpochsInfo{} }
func (m *EpochsInfo) String() string { return proto.CompactTextString(m) }
func (*EpochsInfo) ProtoMessage()    {}
func (*EpochsInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3481bb447417ce28, []int{2}
}
func (m *EpochsInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochsInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EpochsInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EpochsInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochsInfo.Merge(m, src)
}
func (m *EpochsInfo) XXX_Size() int {
	return m.Size()
}
func (m *EpochsInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochsInfo.DiscardUnknown(m)
}

var xxx_messageInfo_EpochsInfo proto.InternalMessageInfo

func (m *EpochsInfo) GetEpochsInfo() []types1.EpochInfo {
	if m != nil {
		return m.EpochsInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*OsmosisRequestState)(nil), "quasarlabs.quasarnode.qoracle.osmosis.OsmosisRequestState")
	proto.RegisterType((*IncentivizedPools)(nil), "quasarlabs.quasarnode.qoracle.osmosis.IncentivizedPools")
	proto.RegisterType((*EpochsInfo)(nil), "quasarlabs.quasarnode.qoracle.osmosis.EpochsInfo")
}

func init() { proto.RegisterFile("qoracle/osmosis/osmosis.proto", fileDescriptor_3481bb447417ce28) }

var fileDescriptor_3481bb447417ce28 = []byte{
	// 409 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x52, 0xcf, 0x6a, 0xd4, 0x40,
	0x18, 0xdf, 0x71, 0x97, 0x22, 0x53, 0xb1, 0xec, 0x28, 0x12, 0x8a, 0xc6, 0x35, 0x20, 0x06, 0xc5,
	0x19, 0xab, 0x17, 0xaf, 0x16, 0x84, 0xf6, 0xa4, 0xa4, 0xe0, 0xc1, 0x4b, 0x98, 0x24, 0xdf, 0x26,
	0x43, 0xd3, 0xf9, 0x92, 0xcc, 0xa4, 0xda, 0x3e, 0x85, 0x4f, 0xe1, 0xb3, 0xf4, 0xd8, 0xa3, 0x27,
	0x91, 0xdd, 0x17, 0x91, 0x24, 0xb3, 0x59, 0xdd, 0x53, 0x26, 0xbf, 0xef, 0xf7, 0x27, 0xf9, 0xcd,
	0x47, 0x9f, 0xd4, 0xd8, 0xc8, 0xb4, 0x04, 0x81, 0xe6, 0x02, 0x8d, 0x32, 0x9b, 0x27, 0xaf, 0x1a,
	0xb4, 0xc8, 0x9e, 0xd7, 0xad, 0x34, 0xb2, 0x29, 0x65, 0x62, 0xf8, 0x70, 0xd4, 0x98, 0x01, 0x77,
	0x22, 0xee, 0xc8, 0x87, 0x0f, 0x73, 0xcc, 0xb1, 0x57, 0x88, 0xee, 0x34, 0x88, 0x0f, 0x5f, 0x6d,
	0x3c, 0x2b, 0xc4, 0xf2, 0xb5, 0xd2, 0x29, 0x68, 0xab, 0x2e, 0xc1, 0x88, 0xcb, 0xa3, 0x04, 0xac,
	0x3c, 0x12, 0x75, 0x0b, 0xcd, 0x95, 0x23, 0x3f, 0xde, 0x90, 0xa1, 0xc2, 0xb4, 0x30, 0x22, 0x07,
	0x0d, 0xe3, 0x77, 0x04, 0x3f, 0x09, 0x7d, 0xf0, 0x69, 0x20, 0x44, 0x50, 0xb7, 0x60, 0xec, 0x99,
	0x95, 0x16, 0xd8, 0x0b, 0x7a, 0x50, 0xc9, 0xf4, 0x1c, 0x6c, 0x6c, 0x3a, 0x58, 0xa7, 0xe0, 0x91,
	0x05, 0x09, 0x67, 0xd1, 0xfd, 0x01, 0x3e, 0x73, 0x28, 0x0b, 0xe8, 0x3d, 0x99, 0x9e, 0x6b, 0xfc,
	0x56, 0x42, 0x96, 0x43, 0xe6, 0xdd, 0x59, 0x90, 0xf0, 0x6e, 0xf4, 0x1f, 0xc6, 0x1e, 0xd1, 0xbd,
	0xa5, 0x54, 0x25, 0x64, 0xde, 0xb4, 0x9f, 0xba, 0x37, 0xf6, 0x92, 0xce, 0xdb, 0x2a, 0x93, 0x16,
	0xb2, 0x58, 0xda, 0xb8, 0x00, 0x95, 0x17, 0xd6, 0x9b, 0x2d, 0x48, 0x38, 0x8d, 0x0e, 0xdc, 0xe0,
	0x83, 0x3d, 0xe9, 0xe1, 0xe0, 0x9a, 0xce, 0x4f, 0xdd, 0x8f, 0xaa, 0x6b, 0xc8, 0x3e, 0x23, 0x96,
	0x86, 0x01, 0x65, 0xea, 0x1f, 0x30, 0xee, 0xfa, 0x30, 0x1e, 0x59, 0x4c, 0xc3, 0xfd, 0xb7, 0x6f,
	0xf8, 0xd8, 0x38, 0x62, 0xb9, 0x2d, 0x89, 0xbb, 0x92, 0xf8, 0xae, 0xdd, 0xf1, 0xec, 0xe6, 0xf7,
	0xd3, 0x49, 0x34, 0x57, 0xbb, 0x31, 0xc1, 0x17, 0x4a, 0x3f, 0xf6, 0xe5, 0x9d, 0xea, 0x25, 0xb2,
	0x13, 0xba, 0x3f, 0x54, 0x19, 0x2b, 0xbd, 0x44, 0x97, 0xf6, 0x6c, 0x4c, 0x1b, 0x66, 0x63, 0x4a,
	0x2f, 0xec, 0x74, 0xce, 0x9e, 0xc2, 0xe8, 0x74, 0x1c, 0xdd, 0xac, 0x7c, 0x72, 0xbb, 0xf2, 0xc9,
	0x9f, 0x95, 0x4f, 0x7e, 0xac, 0xfd, 0xc9, 0xed, 0xda, 0x9f, 0xfc, 0x5a, 0xfb, 0x93, 0xaf, 0xef,
	0x73, 0x65, 0x8b, 0x36, 0xe1, 0x29, 0x5e, 0x88, 0xed, 0xa6, 0x88, 0xed, 0xa6, 0x88, 0xef, 0x62,
	0x77, 0xc1, 0xec, 0x55, 0x05, 0x26, 0xd9, 0xeb, 0xef, 0xf5, 0xdd, 0xdf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xd8, 0x82, 0x38, 0x94, 0x80, 0x02, 0x00, 0x00,
}

func (m *OsmosisRequestState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OsmosisRequestState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OsmosisRequestState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedAtHeight != 0 {
		i = encodeVarintOsmosis(dAtA, i, uint64(m.UpdatedAtHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.Failed {
		i--
		if m.Failed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Acknowledged {
		i--
		if m.Acknowledged {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.PacketSequence != 0 {
		i = encodeVarintOsmosis(dAtA, i, uint64(m.PacketSequence))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IncentivizedPools) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncentivizedPools) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IncentivizedPools) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IncentivizedPools) > 0 {
		for iNdEx := len(m.IncentivizedPools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IncentivizedPools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOsmosis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EpochsInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochsInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochsInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EpochsInfo) > 0 {
		for iNdEx := len(m.EpochsInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EpochsInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOsmosis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintOsmosis(dAtA []byte, offset int, v uint64) int {
	offset -= sovOsmosis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OsmosisRequestState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PacketSequence != 0 {
		n += 1 + sovOsmosis(uint64(m.PacketSequence))
	}
	if m.Acknowledged {
		n += 2
	}
	if m.Failed {
		n += 2
	}
	if m.UpdatedAtHeight != 0 {
		n += 1 + sovOsmosis(uint64(m.UpdatedAtHeight))
	}
	return n
}

func (m *IncentivizedPools) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IncentivizedPools) > 0 {
		for _, e := range m.IncentivizedPools {
			l = e.Size()
			n += 1 + l + sovOsmosis(uint64(l))
		}
	}
	return n
}

func (m *EpochsInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EpochsInfo) > 0 {
		for _, e := range m.EpochsInfo {
			l = e.Size()
			n += 1 + l + sovOsmosis(uint64(l))
		}
	}
	return n
}

func sovOsmosis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOsmosis(x uint64) (n int) {
	return sovOsmosis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OsmosisRequestState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOsmosis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OsmosisRequestState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OsmosisRequestState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketSequence", wireType)
			}
			m.PacketSequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOsmosis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PacketSequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Acknowledged", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOsmosis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Acknowledged = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOsmosis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Failed = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAtHeight", wireType)
			}
			m.UpdatedAtHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOsmosis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAtHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOsmosis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOsmosis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncentivizedPools) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOsmosis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IncentivizedPools: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IncentivizedPools: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncentivizedPools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOsmosis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOsmosis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOsmosis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IncentivizedPools = append(m.IncentivizedPools, types.IncentivizedPool{})
			if err := m.IncentivizedPools[len(m.IncentivizedPools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOsmosis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOsmosis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EpochsInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOsmosis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EpochsInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EpochsInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOsmosis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOsmosis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOsmosis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochsInfo = append(m.EpochsInfo, types1.EpochInfo{})
			if err := m.EpochsInfo[len(m.EpochsInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOsmosis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOsmosis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOsmosis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOsmosis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOsmosis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOsmosis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOsmosis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOsmosis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOsmosis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOsmosis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOsmosis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOsmosis = fmt.Errorf("proto: unexpected end of group")
)
