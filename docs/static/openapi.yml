openapi: 3.0.0
info:
  title: Quasar - GRPC Gateway Docs
  description: A REST interface for state queries, legacy transactions
  version: 1.0.0
paths:
  /quasarlabs/epochs/v1beta1/current_epoch:
    get:
      summary: CurrentEpoch provide current epoch of specified identifier
      operationId: CurrentEpoch
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  current_epoch:
                    type: string
                    format: int64
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          type: string
                          format: byte
      parameters:
        - name: identifier
          in: query
          required: false
          schema:
            type: string
      tags:
        - Query
  /quasarlabs/epochs/v1beta1/epochs:
    get:
      summary: EpochInfos provide running epochInfos
      operationId: EpochInfos
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  epochs:
                    type: array
                    items:
                      type: object
                      properties:
                        identifier:
                          type: string
                        start_time:
                          type: string
                          format: date-time
                        duration:
                          type: string
                        current_epoch:
                          type: string
                          format: int64
                        current_epoch_start_time:
                          type: string
                          format: date-time
                        epoch_counting_started:
                          type: boolean
                        current_epoch_start_height:
                          type: string
                          format: int64
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          type: string
                          format: byte
      tags:
        - Query
  "/quasarlabs/quasarnode/intergamm/get_port_info/{portID}/{destinationChainID}":
    get:
      summary: Queries a list of GetPortInfo items.
      operationId: GetPortInfo
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  portInfo:
                    type: object
                    properties:
                      portID:
                        type: string
                      channelID:
                        type: string
                      counterpartyChannelID:
                        type: string
                      connectionID:
                        type: string
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          type: string
                          format: byte
      parameters:
        - name: portID
          in: path
          required: true
          schema:
            type: string
        - name: destinationChainID
          in: path
          required: true
          schema:
            type: string
      tags:
        - Query
  "/quasarlabs/quasarnode/intergamm/ica_address_on_denom_native_zone/{owner}/{denom}":
    get:
      summary: Queries a list of ICAAddressOnDenomNativeZone items.
      operationId: ICAAddressOnDenomNativeZone
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  icaAddress:
                    type: string
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          type: string
                          format: byte
      parameters:
        - name: owner
          in: path
          required: true
          schema:
            type: string
        - name: denom
          in: path
          required: true
          schema:
            type: string
      tags:
        - Query
  "/quasarlabs/quasarnode/intergamm/ica_address_on_zone/{owner}/{zoneId}":
    get:
      summary: Queries a list of ICAAddressOnZone items.
      operationId: ICAAddressOnZone
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  icaAddress:
                    type: string
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          type: string
                          format: byte
      parameters:
        - name: owner
          in: path
          required: true
          schema:
            type: string
        - name: zoneId
          in: path
          required: true
          schema:
            type: string
      tags:
        - Query
  /quasarlabs/quasarnode/intergamm/interchain_account_from_address:
    get:
      summary: Queries a list of InterchainAccountFromAddress items.
      operationId: InterchainAccountFromAddress
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  interchain_account_address:
                    type: string
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          type: string
                          format: byte
      parameters:
        - name: owner
          in: query
          required: false
          schema:
            type: string
        - name: connection_id
          in: query
          required: false
          schema:
            type: string
      tags:
        - Query
  /quasarlabs/quasarnode/intergamm/params:
    get:
      summary: Parameters queries the parameters of the module.
      operationId: IntergammParams
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  params:
                    description: params holds all the parameters of this module.
                    type: object
                    properties:
                      quasar_denom_to_native_zone_id_map:
                        type: object
                        additionalProperties:
                          type: string
                      osmosis_denom_to_quasar_denom_map:
                        type: object
                        additionalProperties:
                          type: string
                      complete_zone_info_map:
                        type: object
                        additionalProperties:
                          type: object
                          properties:
                            zone_route_info:
                              type: object
                              properties:
                                zone_id:
                                  type: string
                                  title: "zone ID: a unique ID for source zone of this route"
                                chain_id:
                                  type: string
                                  title: chain ID of the source zone
                                counterparty_zone_id:
                                  type: string
                                  title: "counterparty zone ID: a unique ID for destination zone of this route"
                                counterparty_chain_id:
                                  type: string
                                  title: chain ID of the destination zone
                                connection_id:
                                  type: string
                                  title: IBC connection ID from source to destination
                                port_id:
                                  type: string
                                  title: IBC port ID from source to destination (usually 'transfer')
                                channel_id:
                                  type: string
                                  title: IBC channel ID from source to destination
                                counterparty_connection_id:
                                  type: string
                                  title: IBC counterparty connection ID from destination to source
                                counterparty_port_id:
                                  type: string
                                  title: IBC counterparty port ID from destination to source (usually 'transfer')
                                counterparty_channel_id:
                                  type: string
                                  title: IBC counterparty channel ID from destination to source
                                counterparty_version:
                                  type: string
                                  title: IBC counterparty version
                            next_zone_route_map:
                              type: object
                              additionalProperties:
                                type: object
                                properties:
                                  zone_id:
                                    type: string
                                    title: "zone ID: a unique ID for source zone of this route"
                                  chain_id:
                                    type: string
                                    title: chain ID of the source zone
                                  counterparty_zone_id:
                                    type: string
                                    title: "counterparty zone ID: a unique ID for destination zone of this route"
                                  counterparty_chain_id:
                                    type: string
                                    title: chain ID of the destination zone
                                  connection_id:
                                    type: string
                                    title: IBC connection ID from source to destination
                                  port_id:
                                    type: string
                                    title: IBC port ID from source to destination (usually 'transfer')
                                  channel_id:
                                    type: string
                                    title: IBC channel ID from source to destination
                                  counterparty_connection_id:
                                    type: string
                                    title: IBC counterparty connection ID from destination to source
                                  counterparty_port_id:
                                    type: string
                                    title: IBC counterparty port ID from destination to source (usually 'transfer')
                                  counterparty_channel_id:
                                    type: string
                                    title: IBC counterparty channel ID from destination to source
                                  counterparty_version:
                                    type: string
                                    title: IBC counterparty version
                          title: IntermediateReceiver
                description: QueryParamsResponse is response type for the Query/Params RPC
                  method.
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          type: string
                          format: byte
      tags:
        - Query
  /quasarlabs/quasarnode/orion/list_active_lps:
    get:
      summary: Queries a list of ListActiveLps items.
      operationId: ListActiveLps
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  lpIds:
                    type: array
                    items:
                      type: string
                      format: uint64
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          type: string
                          format: byte
      tags:
        - Query
  /quasarlabs/quasarnode/orion/list_module_accounts:
    get:
      summary: Queries a list of ListModuleAccounts items.
      operationId: ListModuleAccounts
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  accInfo:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        account:
                          type: string
                        balance:
                          type: array
                          items:
                            type: object
                            properties:
                              denom:
                                type: string
                              amount:
                                type: string
                            description: >-
                              Coin defines a token with a denomination and an
                              amount.


                              NOTE: The amount field is an Int which implements the custom method

                              signatures required by gogoproto.
                      title: AccountInfo is used for orion module reserve account detail
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          type: string
                          format: byte
      tags:
        - Query
  /quasarlabs/quasarnode/orion/lp_epoch_pairs:
    get:
      summary: Queries a list of LpEpochPairs items.
      operationId: LpEpochPairs
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  lpEpochPairs:
                    type: array
                    items:
                      type: object
                      properties:
                        lpId:
                          type: string
                          format: uint64
                        epochDay:
                          type: string
                          format: uint64
                      description: LpEpochPair indicates the epoch day on which lpId was created.
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          type: string
                          format: byte
      tags:
        - Query
  /quasarlabs/quasarnode/orion/lp_position:
    get:
      summary: Queries a LpPosition by index.
      operationId: LpPosition
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  LpPosition:
                    type: object
                    properties:
                      seqNo:
                        type: string
                        format: uint64
                      lpID:
                        type: string
                        format: uint64
                      lockID:
                        type: string
                        format: uint64
                      state:
                        type: string
                        enum:
                          - INIT
                          - JOINING
                          - JOINED
                          - JOIN_FAILED
                          - JOINING_TIMEOUT
                          - EXITING
                          - EXITED
                          - EXIT_FAILED
                          - EXITING_TIMEOUT
                          - SETTLED
                        default: INIT
                      startTime:
                        type: string
                        format: date-time
                      bondingStartEpochDay:
                        type: string
                        format: uint64
                      bondDuration:
                        type: string
                        format: uint64
                      unbondingStartEpochDay:
                        type: string
                        format: uint64
                      unbondingDuration:
                        type: string
                        format: uint64
                      poolID:
                        type: string
                        format: uint64
                      lptoken:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the custom method

                          signatures required by gogoproto.
                      coins:
                        type: array
                        items:
                          type: object
                          properties:
                            denom:
                              type: string
                            amount:
                              type: string
                          description: >-
                            Coin defines a token with a denomination and an
                            amount.


                            NOTE: The amount field is an Int which implements the custom method

                            signatures required by gogoproto.
                      gaugelocks:
                        type: array
                        items:
                          type: object
                          properties:
                            gaugeID:
                              type: string
                              format: uint64
                            isActive:
                              type: boolean
                            lockupDuration:
                              type: string
                            expectedApy:
                              type: string
                            startTime:
                              type: string
                              format: date-time
                          title: >-
                            GaugeLockInfo object is used to save the lockup
                            period, associated approx apy

                            and state whether it is active, and start time of this gauge to check the expected aPY

                            on any given day. Multiple gaugeLockInfo objects will be associated with each LPPosition
                    description: >-
                      LpPosition is used by the strategy during the the Lping
                      activity. 

                      Whenever orion module creates an LP position; an object of LpPosition will be created 

                      for book keeping in the KV store.
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          type: string
                          format: byte
      parameters:
        - name: lpId
          in: query
          required: false
          schema:
            type: string
            format: uint64
      tags:
        - Query
  /quasarlabs/quasarnode/orion/lp_stat:
    get:
      summary: Queries a LpStat by index.
      operationId: LpStat
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  LpStat:
                    type: object
                    properties:
                      lpCount:
                        type: string
                        format: uint64
                      totalLPCoins:
                        type: array
                        items:
                          type: object
                          properties:
                            denom:
                              type: string
                            amount:
                              type: string
                          description: >-
                            Coin defines a token with a denomination and an
                            amount.


                            NOTE: The amount field is an Int which implements the custom method

                            signatures required by gogoproto.
                    title: >-
                      LpStat is used to do the book keeping of Lping activity on
                      a given epochday.

                      Which includes, total number of Lping position and total LP tokens as []sdk.Coin
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          type: string
                          format: byte
      parameters:
        - name: epochDay
          in: query
          required: false
          schema:
            type: string
            format: uint64
      tags:
        - Query
  /quasarlabs/quasarnode/orion/params:
    get:
      summary: Parameters queries the parameters of the module.
      operationId: OrionParams
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  params:
                    description: params holds all the parameters of this module.
                    type: object
                    properties:
                      perf_fee_per:
                        type: string
                      mgmt_fee_per:
                        type: string
                      lp_epoch_id:
                        type: string
                      destination_chain_id:
                        type: string
                      enabled:
                        type: boolean
                      white_listed_pools:
                        type: array
                        items:
                          type: string
                          format: uint64
                      osmosis_local_info:
                        type: object
                        properties:
                          local_zone_id:
                            type: string
                          connection_id:
                            type: string
                          chain_id:
                            type: string
                        description: Local Information of the other zone in the intergamm module.
                description: QueryParamsResponse is response type for the Query/Params RPC
                  method.
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          type: string
                          format: byte
      tags:
        - Query
  /quasarlabs/quasarnode/orion/reserve_balance_all:
    get:
      summary: Queries a list of ReserveBalanceAll items.
      operationId: ReserveBalanceAll
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  accInfo:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        account:
                          type: string
                        balance:
                          type: array
                          items:
                            type: object
                            properties:
                              denom:
                                type: string
                              amount:
                                type: string
                            description: >-
                              Coin defines a token with a denomination and an
                              amount.


                              NOTE: The amount field is an Int which implements the custom method

                              signatures required by gogoproto.
                      title: AccountInfo is used for orion module reserve account detail
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          type: string
                          format: byte
      tags:
        - Query
  /quasarlabs/quasarnode/orion/reward_collection:
    get:
      summary: Queries a RewardCollection by index.
      operationId: RewardCollection
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  RewardCollection:
                    type: object
                    properties:
                      timeCollected:
                        type: string
                        format: date-time
                      coins:
                        type: array
                        items:
                          type: object
                          properties:
                            denom:
                              type: string
                            amount:
                              type: string
                          description: >-
                            Coin defines a token with a denomination and an
                            amount.


                            NOTE: The amount field is an Int which implements the custom method

                            signatures required by gogoproto.
                    description: >-
                      RewardCollection is used to do the book keeping of the
                      reward

                      collected from the osmosis on a given epochday. This is further used for the approx distribution.
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          type: string
                          format: byte
      parameters:
        - name: epochDay
          in: query
          required: false
          schema:
            type: string
            format: uint64
      tags:
        - Query
  "/quasarlabs/quasarnode/qbank/get_all_depsoit_infos/{vaultID}":
    get:
      summary: Queries a list of GetAllDepsoitInfos items.
      operationId: GetAllDepsoitInfos
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  depositInfos:
                    type: array
                    items:
                      type: object
                      properties:
                        vaultID:
                          type: string
                        epochDay:
                          type: string
                          format: uint64
                        lockupPeriod:
                          type: string
                          enum:
                            - Invalid
                            - Days_7
                            - Days_21
                            - Months_1
                            - Months_3
                          default: Invalid
                          title: LockupTypes defines different types of locktypes to be used in the system
                            for users deposit
                        depositorAccAddress:
                          type: string
                        coin:
                          type: object
                          properties:
                            denom:
                              type: string
                            amount:
                              type: string
                          description: >-
                            Coin defines a token with a denomination and an
                            amount.


                            NOTE: The amount field is an Int which implements the custom method

                            signatures required by gogoproto.
                      title: DepositInfo represents the state of a particular deposit
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          type: string
                          format: byte
      parameters:
        - name: vaultID
          in: path
          required: true
          schema:
            type: string
      tags:
        - Query
  /quasarlabs/quasarnode/qbank/params:
    get:
      summary: Parameters queries the parameters of the module.
      operationId: QBankParams
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  params:
                    description: params holds all the parameters of this module.
                    type: object
                    properties:
                      enabled:
                        type: boolean
                      min_orion_epoch_denom_dollar_deposit:
                        type: string
                      orion_epoch_identifier:
                        type: string
                      white_listed_denoms_in_orion:
                        type: array
                        items:
                          type: object
                          properties:
                            origin_name:
                              type: string
                            onehop_quasar:
                              type: string
                            onehop_osmo:
                              type: string
                description: QueryParamsResponse is response type for the Query/Params RPC
                  method.
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          type: string
                          format: byte
      tags:
        - Query
  "/quasarlabs/quasarnode/qbank/total_claimed/{userAcc}/{vaultID}":
    get:
      summary: Queries a list of TotalClaimed items.
      operationId: TotalClaimed
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  coins:
                    type: object
                    properties:
                      coins:
                        type: array
                        items:
                          type: object
                          properties:
                            denom:
                              type: string
                            amount:
                              type: string
                          description: >-
                            Coin defines a token with a denomination and an
                            amount.


                            NOTE: The amount field is an Int which implements the custom method

                            signatures required by gogoproto.
                    description: QCoins defines encoding/decoding for the slice of sdk.coins to be
                      used in KV stores.
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          type: string
                          format: byte
      parameters:
        - name: userAcc
          in: path
          required: true
          schema:
            type: string
        - name: vaultID
          in: path
          required: true
          schema:
            type: string
      tags:
        - Query
  "/quasarlabs/quasarnode/qbank/total_withdraw/{userAcc}/{vaultID}":
    get:
      summary: Queries a list of TotalWithdraw items.
      operationId: TotalWithdraw
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  coins:
                    type: object
                    properties:
                      coins:
                        type: array
                        items:
                          type: object
                          properties:
                            denom:
                              type: string
                            amount:
                              type: string
                          description: >-
                            Coin defines a token with a denomination and an
                            amount.


                            NOTE: The amount field is an Int which implements the custom method

                            signatures required by gogoproto.
                    description: QCoins defines encoding/decoding for the slice of sdk.coins to be
                      used in KV stores.
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          type: string
                          format: byte
      parameters:
        - name: userAcc
          in: path
          required: true
          schema:
            type: string
        - name: vaultID
          in: path
          required: true
          schema:
            type: string
      tags:
        - Query
  "/quasarlabs/quasarnode/qbank/user_claim_rewards/{userAcc}":
    get:
      summary: Queries a list of UserClaimRewards items.
      operationId: UserClaimRewards
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  coins:
                    type: object
                    properties:
                      coins:
                        type: array
                        items:
                          type: object
                          properties:
                            denom:
                              type: string
                            amount:
                              type: string
                          description: >-
                            Coin defines a token with a denomination and an
                            amount.


                            NOTE: The amount field is an Int which implements the custom method

                            signatures required by gogoproto.
                    description: QCoins defines encoding/decoding for the slice of sdk.coins to be
                      used in KV stores.
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          type: string
                          format: byte
      parameters:
        - name: userAcc
          in: path
          required: true
          schema:
            type: string
      tags:
        - Query
  "/quasarlabs/quasarnode/qbank/user_denom_deposit/{userAcc}":
    get:
      summary: Queries a list of UserDenomDeposit items.
      operationId: UserDenomDeposit
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  amount:
                    type: string
                    format: uint64
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          type: string
                          format: byte
      parameters:
        - name: userAcc
          in: path
          required: true
          schema:
            type: string
        - name: denom
          in: query
          required: false
          schema:
            type: string
      tags:
        - Query
  "/quasarlabs/quasarnode/qbank/user_deposit/{userAcc}":
    get:
      summary: Queries a list of UserDeposit items.
      operationId: UserDeposit
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  coins:
                    type: object
                    properties:
                      coins:
                        type: array
                        items:
                          type: object
                          properties:
                            denom:
                              type: string
                            amount:
                              type: string
                          description: >-
                            Coin defines a token with a denomination and an
                            amount.


                            NOTE: The amount field is an Int which implements the custom method

                            signatures required by gogoproto.
                    description: QCoins defines encoding/decoding for the slice of sdk.coins to be
                      used in KV stores.
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          type: string
                          format: byte
      parameters:
        - name: userAcc
          in: path
          required: true
          schema:
            type: string
      tags:
        - Query
  "/quasarlabs/quasarnode/qbank/withdrawable/{userAccount}/{denom}":
    get:
      summary: Queries a list of Withdrawable items.
      operationId: Withdrawable
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  coin:
                    type: object
                    properties:
                      denom:
                        type: string
                      amount:
                        type: string
                    description: >-
                      Coin defines a token with a denomination and an amount.


                      NOTE: The amount field is an Int which implements the custom method

                      signatures required by gogoproto.
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          type: string
                          format: byte
      parameters:
        - name: userAccount
          in: path
          required: true
          schema:
            type: string
        - name: denom
          in: path
          required: true
          schema:
            type: string
      tags:
        - Query
  /quasarlabs/quasarnode/qoracle/oracle_prices:
    get:
      summary: Queries a list of OraclePrices items.
      operationId: OraclePrices
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  prices:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        DecCoin defines a token with a denomination and a
                        decimal amount.


                        NOTE: The amount field is an Dec which implements the custom method

                        signatures required by gogoproto.
                  updated_at_height:
                    type: string
                    format: int64
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at least

                            one "/" character. The last segment of the URL's path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the binary all types that they

                            expect it to use in the context of Any. However, for URLs which use the

                            scheme `http`, `https`, or no scheme, one can optionally set up a type

                            server that maps type URLs to message definitions as follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official

                            protobuf release, and it is not used for type URLs beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty scheme) might be

                            used with implementation specific semantics.
                        value:
                          type: string
                          format: byte
                          description: Must be a valid serialized protocol buffer of the above specified
                            type.
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any values in the form

                        of utility functions or additional generated methods of the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use

                        'type.googleapis.com/full.type.name' as the type URL and the unpack

                        methods only use the fully qualified type name after the last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will yield type

                        name "y.z".



                        JSON


                        The JSON representation of an `Any` value uses the regular

                        representation of the deserialized, embedded message, with an

                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON

                        representation, that representation will be embedded adding a field

                        `value` which holds the custom JSON in addition to the `@type`

                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
      tags:
        - Query
  /quasarlabs/quasarnode/qoracle/osmosis/chain_params:
    get:
      summary: Queries a list of OsmosisChainParams items.
      operationId: OsmosisChainParams
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  epochs_info:
                    type: array
                    items:
                      type: object
                      properties:
                        identifier:
                          type: string
                          description: identifier is a unique reference to this particular timer.
                        start_time:
                          type: string
                          format: date-time
                          description: >-
                            start_time is the time at which the timer first ever
                            ticks.

                            If start_time is in the future, the epoch will not begin until the start

                            time.
                        duration:
                          type: string
                          description: >-
                            duration is the time in between epoch ticks.

                            In order for intended behavior to be met, duration should

                            be greater than the chains expected block time.

                            Duration must be non-zero.
                        current_epoch:
                          type: string
                          format: int64
                          description: >-
                            current_epoch is the current epoch number, or in
                            other words,

                            how many times has the timer 'ticked'.

                            The first tick (current_epoch=1) is defined as

                            the first block whose blocktime is greater than the EpochInfo start_time.
                        current_epoch_start_time:
                          type: string
                          format: date-time
                          description: >-
                            current_epoch_start_time describes the start time of
                            the current timer

                            interval. The interval is (current_epoch_start_time,

                            current_epoch_start_time + duration] When the timer ticks, this is set to

                            current_epoch_start_time = last_epoch_start_time + duration only one timer

                            tick for a given identifier can occur per block.


                            NOTE! The current_epoch_start_time may diverge significantly from the

                            wall-clock time the epoch began at. Wall-clock time of epoch start may be

                            >> current_epoch_start_time. Suppose current_epoch_start_time = 10,

                            duration = 5. Suppose the chain goes offline at t=14, and comes back online

                            at t=30, and produces blocks at every successive time. (t=31, 32, etc.)

                            * The t=30 block will start the epoch for (10, 15]

                            * The t=31 block will start the epoch for (15, 20]

                            * The t=32 block will start the epoch for (20, 25]

                            * The t=33 block will start the epoch for (25, 30]

                            * The t=34 block will start the epoch for (30, 35]

                            * The **t=36** block will start the epoch for (35, 40]
                        epoch_counting_started:
                          type: boolean
                          description: >-
                            epoch_counting_started is a boolean, that indicates
                            whether this

                            epoch timer has began yet.
                        current_epoch_start_height:
                          type: string
                          format: int64
                          title: >-
                            current_epoch_start_height is the block height at
                            which the current epoch

                            started. (The block height at which the timer last ticked)
                      description: |-
                        EpochInfo is a struct that describes the data going into
                        a timer defined by the x/epochs module.
                  lockable_durations:
                    type: array
                    items:
                      type: string
                      format: int64
                  mint_params:
                    type: object
                    properties:
                      mint_denom:
                        type: string
                        description: mint_denom is the denom of the coin to mint.
                      genesis_epoch_provisions:
                        type: string
                        description: genesis_epoch_provisions epoch provisions from the first epoch.
                      epoch_identifier:
                        type: string
                        description: epoch_identifier mint epoch identifier e.g. (day, week).
                      reduction_period_in_epochs:
                        type: string
                        format: int64
                        description: >-
                          reduction_period_in_epochs the number of epochs it
                          takes

                          to reduce the rewards.
                      reduction_factor:
                        type: string
                        description: >-
                          reduction_factor is the reduction multiplier to
                          execute

                          at the end of each period set by reduction_period_in_epochs.
                      distribution_proportions:
                        description: >-
                          distribution_proportions defines the distribution
                          proportions of the minted

                          denom. In other words, defines which stakeholders will receive the minted

                          denoms and how much.
                        type: object
                        properties:
                          staking:
                            type: string
                            description: >-
                              staking defines the proportion of the minted
                              mint_denom that is to be

                              allocated as staking rewards.
                          pool_incentives:
                            type: string
                            description: >-
                              pool_incentives defines the proportion of the
                              minted mint_denom that is

                              to be allocated as pool incentives.
                          developer_rewards:
                            type: string
                            description: >-
                              developer_rewards defines the proportion of the
                              minted mint_denom that is

                              to be allocated to developer rewards address.
                          community_pool:
                            type: string
                            description: >-
                              community_pool defines the proportion of the
                              minted mint_denom that is

                              to be allocated to the community pool.
                      weighted_developer_rewards_receivers:
                        type: array
                        items:
                          type: object
                          properties:
                            address:
                              type: string
                            weight:
                              type: string
                          description: >-
                            WeightedAddress represents an address with a weight
                            assigned to it.

                            The weight is used to determine the proportion of the total minted

                            tokens to be minted to the address.
                        description: >-
                          weighted_developer_rewards_receivers is the address to
                          receive developer

                          rewards with weights assignedt to each address. The final amount that each

                          address receives is: epoch_provisions *

                          distribution_proportions.developer_rewards * Address's Weight.
                      minting_rewards_distribution_start_epoch:
                        type: string
                        format: int64
                        title: >-
                          minting_rewards_distribution_start_epoch start epoch
                          to distribute minting

                          rewards
                    description: Params holds parameters for the x/mint module.
                  mint_epoch_provisions:
                    type: string
                  distr_info:
                    type: object
                    properties:
                      total_weight:
                        type: string
                      records:
                        type: array
                        items:
                          type: object
                          properties:
                            gauge_id:
                              type: string
                              format: uint64
                            weight:
                              type: string
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at least

                            one "/" character. The last segment of the URL's path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the binary all types that they

                            expect it to use in the context of Any. However, for URLs which use the

                            scheme `http`, `https`, or no scheme, one can optionally set up a type

                            server that maps type URLs to message definitions as follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official

                            protobuf release, and it is not used for type URLs beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty scheme) might be

                            used with implementation specific semantics.
                        value:
                          type: string
                          format: byte
                          description: Must be a valid serialized protocol buffer of the above specified
                            type.
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any values in the form

                        of utility functions or additional generated methods of the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use

                        'type.googleapis.com/full.type.name' as the type URL and the unpack

                        methods only use the fully qualified type name after the last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will yield type

                        name "y.z".



                        JSON


                        The JSON representation of an `Any` value uses the regular

                        representation of the deserialized, embedded message, with an

                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON

                        representation, that representation will be embedded adding a field

                        `value` which holds the custom JSON in addition to the `@type`

                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
      tags:
        - Query
  /quasarlabs/quasarnode/qoracle/osmosis/incentivized_pools:
    get:
      summary: Queries a list of OsmosisIncentivizedPools items.
      operationId: OsmosisIncentivizedPools
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  incentivized_pools:
                    type: array
                    items:
                      type: object
                      properties:
                        pool_id:
                          type: string
                          format: uint64
                        lockable_duration:
                          type: string
                        gauge_id:
                          type: string
                          format: uint64
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at least

                            one "/" character. The last segment of the URL's path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the binary all types that they

                            expect it to use in the context of Any. However, for URLs which use the

                            scheme `http`, `https`, or no scheme, one can optionally set up a type

                            server that maps type URLs to message definitions as follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official

                            protobuf release, and it is not used for type URLs beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty scheme) might be

                            used with implementation specific semantics.
                        value:
                          type: string
                          format: byte
                          description: Must be a valid serialized protocol buffer of the above specified
                            type.
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any values in the form

                        of utility functions or additional generated methods of the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use

                        'type.googleapis.com/full.type.name' as the type URL and the unpack

                        methods only use the fully qualified type name after the last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will yield type

                        name "y.z".



                        JSON


                        The JSON representation of an `Any` value uses the regular

                        representation of the deserialized, embedded message, with an

                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON

                        representation, that representation will be embedded adding a field

                        `value` which holds the custom JSON in addition to the `@type`

                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
      tags:
        - Query
  /quasarlabs/quasarnode/qoracle/osmosis/pools:
    get:
      summary: Queries a list of OsmosisPools items.
      operationId: OsmosisPools
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  pools:
                    type: array
                    items:
                      type: object
                      properties:
                        pool_info:
                          type: object
                          properties:
                            address:
                              type: string
                            id:
                              type: string
                              format: uint64
                            pool_params:
                              type: object
                              properties:
                                swap_fee:
                                  type: string
                                exit_fee:
                                  type: string
                                smooth_weight_change_params:
                                  type: object
                                  properties:
                                    start_time:
                                      type: string
                                      format: date-time
                                      description: >-
                                        The start time for beginning the weight
                                        change.

                                        If a parameter change / pool instantiation leaves this blank,

                                        it should be generated by the state_machine as the current time.
                                    duration:
                                      type: string
                                      title: Duration for the weights to change over
                                    initial_pool_weights:
                                      type: array
                                      items:
                                        type: object
                                        properties:
                                          token:
                                            description: >-
                                              Coins we are talking about,

                                              the denomination must be unique amongst all PoolAssets for this pool.
                                            type: object
                                            properties:
                                              denom:
                                                type: string
                                              amount:
                                                type: string
                                          weight:
                                            type: string
                                            title: Weight that is not normalized. This weight must be less than 2^50
                                        description: >-
                                          Pool asset is an internal struct that
                                          combines the amount of the

                                          token in the pool, and its balancer weight.

                                          This is an awkward packaging of data,

                                          and should be revisited in a future state migration.
                                      description: >-
                                        The initial pool weights. These are
                                        copied from the pool's settings

                                        at the time of weight change instantiation.

                                        The amount PoolAsset.token.amount field is ignored if present,

                                        future type refactorings should just have a type with the denom & weight

                                        here.
                                    target_pool_weights:
                                      type: array
                                      items:
                                        type: object
                                        properties:
                                          token:
                                            description: >-
                                              Coins we are talking about,

                                              the denomination must be unique amongst all PoolAssets for this pool.
                                            type: object
                                            properties:
                                              denom:
                                                type: string
                                              amount:
                                                type: string
                                          weight:
                                            type: string
                                            title: Weight that is not normalized. This weight must be less than 2^50
                                        description: >-
                                          Pool asset is an internal struct that
                                          combines the amount of the

                                          token in the pool, and its balancer weight.

                                          This is an awkward packaging of data,

                                          and should be revisited in a future state migration.
                                      description: >-
                                        The target pool weights. The pool
                                        weights will change linearly with
                                        respect

                                        to time between start_time, and start_time + duration. The amount

                                        PoolAsset.token.amount field is ignored if present, future type

                                        refactorings should just have a type with the denom & weight here.
                                  title: >-
                                    Parameters for changing the weights in a
                                    balancer pool smoothly from

                                    a start weight and end weight over a period of time.

                                    Currently, the only smooth change supported is linear changing between

                                    the two weights, but more types may be added in the future.

                                    When these parameters are set, the weight w(t) for pool time `t` is the

                                    following:
                                      t <= start_time: w(t) = initial_pool_weights
                                      start_time < t <= start_time + duration:
                                        w(t) = initial_pool_weights + (t - start_time) *
                                          (target_pool_weights - initial_pool_weights) / (duration)
                                      t > start_time + duration: w(t) = target_pool_weights
                              description: >-
                                PoolParams defined the parameters that will be
                                managed by the pool

                                governance in the future. This params are not managed by the chain

                                governance. Instead they will be managed by the token holders of the pool.

                                The pool's token holders are specified in future_pool_governor.
                            future_pool_governor:
                              type: string
                              title: >-
                                This string specifies who will govern the pool
                                in the future.

                                Valid forms of this are:

                                {token name},{duration}

                                {duration}

                                where {token name} if specified is the token which determines the

                                governor, and if not specified is the LP token for this pool.duration is

                                a time specified as 0w,1w,2w, etc. which specifies how long the token

                                would need to be locked up to count in governance. 0w means no lockup.

                                TODO: Further improve these docs
                            total_shares:
                              title: sum of all LP tokens sent out
                              type: object
                              properties:
                                denom:
                                  type: string
                                amount:
                                  type: string
                              description: >-
                                Coin defines a token with a denomination and an
                                amount.


                                NOTE: The amount field is an Int which implements the custom method

                                signatures required by gogoproto.
                            pool_assets:
                              type: array
                              items:
                                type: object
                                properties:
                                  token:
                                    description: >-
                                      Coins we are talking about,

                                      the denomination must be unique amongst all PoolAssets for this pool.
                                    type: object
                                    properties:
                                      denom:
                                        type: string
                                      amount:
                                        type: string
                                  weight:
                                    type: string
                                    title: Weight that is not normalized. This weight must be less than 2^50
                                description: >-
                                  Pool asset is an internal struct that combines
                                  the amount of the

                                  token in the pool, and its balancer weight.

                                  This is an awkward packaging of data,

                                  and should be revisited in a future state migration.
                              title: >-
                                These are assumed to be sorted by denomiation.

                                They contain the pool asset and the information about the weight
                            total_weight:
                              type: string
                              title: sum of all non-normalized pool weights
                        metrics:
                          type: object
                          properties:
                            apy:
                              type: string
                              format: byte
                            tvl:
                              type: string
                              format: byte
                  pagination:
                    type: object
                    properties:
                      next_key:
                        type: string
                        format: byte
                        description: >-
                          next_key is the key to be passed to PageRequest.key to

                          query the next page most efficiently. It will be empty if

                          there are no more results.
                      total:
                        type: string
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                    description: >-
                      PageResponse is to be embedded in gRPC response messages
                      where the

                      corresponding request message has used PageRequest.

                       message SomeResponse {
                               repeated Bar results = 1;
                               PageResponse page = 2;
                       }
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at least

                            one "/" character. The last segment of the URL's path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the binary all types that they

                            expect it to use in the context of Any. However, for URLs which use the

                            scheme `http`, `https`, or no scheme, one can optionally set up a type

                            server that maps type URLs to message definitions as follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official

                            protobuf release, and it is not used for type URLs beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty scheme) might be

                            used with implementation specific semantics.
                        value:
                          type: string
                          format: byte
                          description: Must be a valid serialized protocol buffer of the above specified
                            type.
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any values in the form

                        of utility functions or additional generated methods of the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use

                        'type.googleapis.com/full.type.name' as the type URL and the unpack

                        methods only use the fully qualified type name after the last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will yield type

                        name "y.z".



                        JSON


                        The JSON representation of an `Any` value uses the regular

                        representation of the deserialized, embedded message, with an

                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON

                        representation, that representation will be embedded adding a field

                        `value` which holds the custom JSON in addition to the `@type`

                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          schema:
            type: string
            format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key should

            be set.
          in: query
          required: false
          schema:
            type: string
            format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          schema:
            type: string
            format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in UIs.

            count_total is only respected when offset is used. It is ignored when key

            is set.
          in: query
          required: false
          schema:
            type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          schema:
            type: boolean
      tags:
        - Query
  /quasarlabs/quasarnode/qoracle/params:
    get:
      summary: Parameters queries the parameters of the module.
      operationId: QOracleParams
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  params:
                    description: params holds all the parameters of this module.
                    type: object
                    properties:
                      bandchain_params:
                        type: object
                        properties:
                          oracle_ibc_params:
                            type: object
                            properties:
                              authorized_channel:
                                type: string
                              timeout_height:
                                type: object
                                properties:
                                  revision_number:
                                    type: string
                                    format: uint64
                                    title: the revision that the client is currently on
                                  revision_height:
                                    type: string
                                    format: uint64
                                    title: the height within the given revision
                                description: >-
                                  Normally the RevisionHeight is incremented at
                                  each height while keeping

                                  RevisionNumber the same. However some consensus algorithms may choose to

                                  reset the height in certain conditions e.g. hard forks, state-machine

                                  breaking changes In these cases, the RevisionNumber is incremented so that

                                  height continues to be monitonically increasing even as the RevisionHeight

                                  gets reset
                                title: >-
                                  Height is a monotonically increasing data type

                                  that can be compared against another Height for the purposes of updating and

                                  freezing clients
                              timeout_timestamp:
                                type: string
                                format: uint64
                          coin_rates_params:
                            type: object
                            properties:
                              epoch_identifier:
                                type: string
                              symbols:
                                type: array
                                items:
                                  type: string
                              script_params:
                                type: object
                                properties:
                                  script_id:
                                    type: string
                                    format: uint64
                                  ask_count:
                                    type: string
                                    format: uint64
                                  min_count:
                                    type: string
                                    format: uint64
                                  fee_limit:
                                    type: array
                                    items:
                                      type: object
                                      properties:
                                        denom:
                                          type: string
                                        amount:
                                          type: string
                                      description: >-
                                        Coin defines a token with a denomination
                                        and an amount.


                                        NOTE: The amount field is an Int which implements the custom method

                                        signatures required by gogoproto.
                                  prepare_gas:
                                    type: string
                                    format: uint64
                                  execute_gas:
                                    type: string
                                    format: uint64
                      osmosis_params:
                        type: object
                        properties:
                          icq_params:
                            type: object
                            properties:
                              authorized_channel:
                                type: string
                              timeout_height:
                                type: object
                                properties:
                                  revision_number:
                                    type: string
                                    format: uint64
                                    title: the revision that the client is currently on
                                  revision_height:
                                    type: string
                                    format: uint64
                                    title: the height within the given revision
                                description: >-
                                  Normally the RevisionHeight is incremented at
                                  each height while keeping

                                  RevisionNumber the same. However some consensus algorithms may choose to

                                  reset the height in certain conditions e.g. hard forks, state-machine

                                  breaking changes In these cases, the RevisionNumber is incremented so that

                                  height continues to be monitonically increasing even as the RevisionHeight

                                  gets reset
                                title: >-
                                  Height is a monotonically increasing data type

                                  that can be compared against another Height for the purposes of updating and

                                  freezing clients
                              timeout_timestamp:
                                type: string
                                format: uint64
                          epoch_identifier:
                            type: string
                      denom_price_mappings:
                        type: array
                        items:
                          type: object
                          properties:
                            denom:
                              type: string
                            oracle_denom:
                              type: string
                            multiplier:
                              type: string
                      oneHopDenomMap:
                        type: array
                        items:
                          type: object
                          properties:
                            originName:
                              type: string
                            quasar:
                              type: string
                            osmo:
                              type: string
                description: QueryParamsResponse is response type for the Query/Params RPC
                  method.
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at least

                            one "/" character. The last segment of the URL's path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the binary all types that they

                            expect it to use in the context of Any. However, for URLs which use the

                            scheme `http`, `https`, or no scheme, one can optionally set up a type

                            server that maps type URLs to message definitions as follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official

                            protobuf release, and it is not used for type URLs beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty scheme) might be

                            used with implementation specific semantics.
                        value:
                          type: string
                          format: byte
                          description: Must be a valid serialized protocol buffer of the above specified
                            type.
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any values in the form

                        of utility functions or additional generated methods of the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use

                        'type.googleapis.com/full.type.name' as the type URL and the unpack

                        methods only use the fully qualified type name after the last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will yield type

                        name "y.z".



                        JSON


                        The JSON representation of an `Any` value uses the regular

                        representation of the deserialized, embedded message, with an

                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON

                        representation, that representation will be embedded adding a field

                        `value` which holds the custom JSON in addition to the `@type`

                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
      tags:
        - Query
  /quasarlabs/quasarnode/qoracle/state:
    get:
      summary: Queries a list of State items.
      operationId: State
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  coin_rates_state:
                    type: object
                    properties:
                      call_data:
                        type: object
                        properties:
                          type_url:
                            type: string
                            description: >-
                              A URL/resource name that uniquely identifies the
                              type of the serialized

                              protocol buffer message. This string must contain at least

                              one "/" character. The last segment of the URL's path must represent

                              the fully qualified name of the type (as in

                              `path/google.protobuf.Duration`). The name should be in a canonical form

                              (e.g., leading "." is not accepted).


                              In practice, teams usually precompile into the binary all types that they

                              expect it to use in the context of Any. However, for URLs which use the

                              scheme `http`, `https`, or no scheme, one can optionally set up a type

                              server that maps type URLs to message definitions as follows:


                              * If no scheme is provided, `https` is assumed.

                              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                                value in binary format, or produce an error.
                              * Applications are allowed to cache lookup results based on the
                                URL, or have them precompiled into a binary to avoid any
                                lookup. Therefore, binary compatibility needs to be preserved
                                on changes to types. (Use versioned type names to manage
                                breaking changes.)

                              Note: this functionality is not currently available in the official

                              protobuf release, and it is not used for type URLs beginning with

                              type.googleapis.com.


                              Schemes other than `http`, `https` (or the empty scheme) might be

                              used with implementation specific semantics.
                          value:
                            type: string
                            format: byte
                            description: Must be a valid serialized protocol buffer of the above specified
                              type.
                        description: >-
                          `Any` contains an arbitrary serialized protocol buffer
                          message along with a

                          URL that describes the type of the serialized message.


                          Protobuf library provides support to pack/unpack Any values in the form

                          of utility functions or additional generated methods of the Any type.


                          Example 1: Pack and unpack a message in C++.

                              Foo foo = ...;
                              Any any;
                              any.PackFrom(foo);
                              ...
                              if (any.UnpackTo(&foo)) {
                                ...
                              }

                          Example 2: Pack and unpack a message in Java.

                              Foo foo = ...;
                              Any any = Any.pack(foo);
                              ...
                              if (any.is(Foo.class)) {
                                foo = any.unpack(Foo.class);
                              }

                          Example 3: Pack and unpack a message in Python.

                              foo = Foo(...)
                              any = Any()
                              any.Pack(foo)
                              ...
                              if any.Is(Foo.DESCRIPTOR):
                                any.Unpack(foo)
                                ...

                          Example 4: Pack and unpack a message in Go

                               foo := &pb.Foo{...}
                               any, err := anypb.New(foo)
                               if err != nil {
                                 ...
                               }
                               ...
                               foo := &pb.Foo{}
                               if err := any.UnmarshalTo(foo); err != nil {
                                 ...
                               }

                          The pack methods provided by protobuf library will by default use

                          'type.googleapis.com/full.type.name' as the type URL and the unpack

                          methods only use the fully qualified type name after the last '/'

                          in the type URL, for example "foo.bar.com/x/y.z" will yield type

                          name "y.z".



                          JSON


                          The JSON representation of an `Any` value uses the regular

                          representation of the deserialized, embedded message, with an

                          additional field `@type` which contains the type URL. Example:

                              package google.profile;
                              message Person {
                                string first_name = 1;
                                string last_name = 2;
                              }

                              {
                                "@type": "type.googleapis.com/google.profile.Person",
                                "firstName": <string>,
                                "lastName": <string>
                              }

                          If the embedded message type is well-known and has a custom JSON

                          representation, that representation will be embedded adding a field

                          `value` which holds the custom JSON in addition to the `@type`

                          field. Example (for message [google.protobuf.Duration][]):

                              {
                                "@type": "type.googleapis.com/google.protobuf.Duration",
                                "value": "1.212s"
                              }
                      request_packet_sequence:
                        type: string
                        format: uint64
                      oracle_request_id:
                        type: string
                        format: uint64
                      result_packet_sequence:
                        type: string
                        format: uint64
                      result:
                        type: object
                        properties:
                          type_url:
                            type: string
                            description: >-
                              A URL/resource name that uniquely identifies the
                              type of the serialized

                              protocol buffer message. This string must contain at least

                              one "/" character. The last segment of the URL's path must represent

                              the fully qualified name of the type (as in

                              `path/google.protobuf.Duration`). The name should be in a canonical form

                              (e.g., leading "." is not accepted).


                              In practice, teams usually precompile into the binary all types that they

                              expect it to use in the context of Any. However, for URLs which use the

                              scheme `http`, `https`, or no scheme, one can optionally set up a type

                              server that maps type URLs to message definitions as follows:


                              * If no scheme is provided, `https` is assumed.

                              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                                value in binary format, or produce an error.
                              * Applications are allowed to cache lookup results based on the
                                URL, or have them precompiled into a binary to avoid any
                                lookup. Therefore, binary compatibility needs to be preserved
                                on changes to types. (Use versioned type names to manage
                                breaking changes.)

                              Note: this functionality is not currently available in the official

                              protobuf release, and it is not used for type URLs beginning with

                              type.googleapis.com.


                              Schemes other than `http`, `https` (or the empty scheme) might be

                              used with implementation specific semantics.
                          value:
                            type: string
                            format: byte
                            description: Must be a valid serialized protocol buffer of the above specified
                              type.
                        description: >-
                          `Any` contains an arbitrary serialized protocol buffer
                          message along with a

                          URL that describes the type of the serialized message.


                          Protobuf library provides support to pack/unpack Any values in the form

                          of utility functions or additional generated methods of the Any type.


                          Example 1: Pack and unpack a message in C++.

                              Foo foo = ...;
                              Any any;
                              any.PackFrom(foo);
                              ...
                              if (any.UnpackTo(&foo)) {
                                ...
                              }

                          Example 2: Pack and unpack a message in Java.

                              Foo foo = ...;
                              Any any = Any.pack(foo);
                              ...
                              if (any.is(Foo.class)) {
                                foo = any.unpack(Foo.class);
                              }

                          Example 3: Pack and unpack a message in Python.

                              foo = Foo(...)
                              any = Any()
                              any.Pack(foo)
                              ...
                              if any.Is(Foo.DESCRIPTOR):
                                any.Unpack(foo)
                                ...

                          Example 4: Pack and unpack a message in Go

                               foo := &pb.Foo{...}
                               any, err := anypb.New(foo)
                               if err != nil {
                                 ...
                               }
                               ...
                               foo := &pb.Foo{}
                               if err := any.UnmarshalTo(foo); err != nil {
                                 ...
                               }

                          The pack methods provided by protobuf library will by default use

                          'type.googleapis.com/full.type.name' as the type URL and the unpack

                          methods only use the fully qualified type name after the last '/'

                          in the type URL, for example "foo.bar.com/x/y.z" will yield type

                          name "y.z".



                          JSON


                          The JSON representation of an `Any` value uses the regular

                          representation of the deserialized, embedded message, with an

                          additional field `@type` which contains the type URL. Example:

                              package google.profile;
                              message Person {
                                string first_name = 1;
                                string last_name = 2;
                              }

                              {
                                "@type": "type.googleapis.com/google.profile.Person",
                                "firstName": <string>,
                                "lastName": <string>
                              }

                          If the embedded message type is well-known and has a custom JSON

                          representation, that representation will be embedded adding a field

                          `value` which holds the custom JSON in addition to the `@type`

                          field. Example (for message [google.protobuf.Duration][]):

                              {
                                "@type": "type.googleapis.com/google.protobuf.Duration",
                                "value": "1.212s"
                              }
                      failed:
                        type: boolean
                      updated_at_height:
                        type: string
                        format: int64
                  osmosis_params_request_state:
                    type: object
                    properties:
                      packet_sequence:
                        type: string
                        format: uint64
                      acknowledged:
                        type: boolean
                      failed:
                        type: boolean
                      updated_at_height:
                        type: string
                        format: int64
                  osmosis_incentivized_pools_state:
                    type: object
                    properties:
                      packet_sequence:
                        type: string
                        format: uint64
                      acknowledged:
                        type: boolean
                      failed:
                        type: boolean
                      updated_at_height:
                        type: string
                        format: int64
                  osmosis_pools_state:
                    type: object
                    properties:
                      packet_sequence:
                        type: string
                        format: uint64
                      acknowledged:
                        type: boolean
                      failed:
                        type: boolean
                      updated_at_height:
                        type: string
                        format: int64
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at least

                            one "/" character. The last segment of the URL's path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the binary all types that they

                            expect it to use in the context of Any. However, for URLs which use the

                            scheme `http`, `https`, or no scheme, one can optionally set up a type

                            server that maps type URLs to message definitions as follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official

                            protobuf release, and it is not used for type URLs beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty scheme) might be

                            used with implementation specific semantics.
                        value:
                          type: string
                          format: byte
                          description: Must be a valid serialized protocol buffer of the above specified
                            type.
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any values in the form

                        of utility functions or additional generated methods of the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use

                        'type.googleapis.com/full.type.name' as the type URL and the unpack

                        methods only use the fully qualified type name after the last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will yield type

                        name "y.z".



                        JSON


                        The JSON representation of an `Any` value uses the regular

                        representation of the deserialized, embedded message, with an

                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON

                        representation, that representation will be embedded adding a field

                        `value` which holds the custom JSON in addition to the `@type`

                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
      tags:
        - Query
components:
  schemas:
    google.protobuf.Any:
      type: object
      properties:
        type_url:
          type: string
          description: >-
            A URL/resource name that uniquely identifies the type of the
            serialized

            protocol buffer message. This string must contain at least

            one "/" character. The last segment of the URL's path must represent

            the fully qualified name of the type (as in

            `path/google.protobuf.Duration`). The name should be in a canonical form

            (e.g., leading "." is not accepted).


            In practice, teams usually precompile into the binary all types that they

            expect it to use in the context of Any. However, for URLs which use the

            scheme `http`, `https`, or no scheme, one can optionally set up a type

            server that maps type URLs to message definitions as follows:


            * If no scheme is provided, `https` is assumed.

            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
              value in binary format, or produce an error.
            * Applications are allowed to cache lookup results based on the
              URL, or have them precompiled into a binary to avoid any
              lookup. Therefore, binary compatibility needs to be preserved
              on changes to types. (Use versioned type names to manage
              breaking changes.)

            Note: this functionality is not currently available in the official

            protobuf release, and it is not used for type URLs beginning with

            type.googleapis.com.


            Schemes other than `http`, `https` (or the empty scheme) might be

            used with implementation specific semantics.
        value:
          type: string
          format: byte
          description: Must be a valid serialized protocol buffer of the above specified
            type.
      description: >-
        `Any` contains an arbitrary serialized protocol buffer message along
        with a

        URL that describes the type of the serialized message.


        Protobuf library provides support to pack/unpack Any values in the form

        of utility functions or additional generated methods of the Any type.


        Example 1: Pack and unpack a message in C++.

            Foo foo = ...;
            Any any;
            any.PackFrom(foo);
            ...
            if (any.UnpackTo(&foo)) {
              ...
            }

        Example 2: Pack and unpack a message in Java.

            Foo foo = ...;
            Any any = Any.pack(foo);
            ...
            if (any.is(Foo.class)) {
              foo = any.unpack(Foo.class);
            }

        Example 3: Pack and unpack a message in Python.

            foo = Foo(...)
            any = Any()
            any.Pack(foo)
            ...
            if any.Is(Foo.DESCRIPTOR):
              any.Unpack(foo)
              ...

        Example 4: Pack and unpack a message in Go

             foo := &pb.Foo{...}
             any, err := anypb.New(foo)
             if err != nil {
               ...
             }
             ...
             foo := &pb.Foo{}
             if err := any.UnmarshalTo(foo); err != nil {
               ...
             }

        The pack methods provided by protobuf library will by default use

        'type.googleapis.com/full.type.name' as the type URL and the unpack

        methods only use the fully qualified type name after the last '/'

        in the type URL, for example "foo.bar.com/x/y.z" will yield type

        name "y.z".



        JSON


        The JSON representation of an `Any` value uses the regular

        representation of the deserialized, embedded message, with an

        additional field `@type` which contains the type URL. Example:

            package google.profile;
            message Person {
              string first_name = 1;
              string last_name = 2;
            }

            {
              "@type": "type.googleapis.com/google.profile.Person",
              "firstName": <string>,
              "lastName": <string>
            }

        If the embedded message type is well-known and has a custom JSON

        representation, that representation will be embedded adding a field

        `value` which holds the custom JSON in addition to the `@type`

        field. Example (for message [google.protobuf.Duration][]):

            {
              "@type": "type.googleapis.com/google.protobuf.Duration",
              "value": "1.212s"
            }
    grpc.gateway.runtime.Error:
      type: object
      properties:
        error:
          type: string
        code:
          type: integer
          format: int32
        message:
          type: string
        details:
          type: array
          items:
            type: object
            properties:
              type_url:
                type: string
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all types that they

                  expect it to use in the context of Any. However, for URLs which use the

                  scheme `http`, `https`, or no scheme, one can optionally set up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the official

                  protobuf release, and it is not used for type URLs beginning with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might be

                  used with implementation specific semantics.
              value:
                type: string
                format: byte
                description: Must be a valid serialized protocol buffer of the above specified
                  type.
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the form

              of utility functions or additional generated methods of the Any type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }

              Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

              Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := anypb.New(foo)
                   if err != nil {
                     ...
                   }
                   ...
                   foo := &pb.Foo{}
                   if err := any.UnmarshalTo(foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".



              JSON


              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
    quasarlabs.quasarnode.epochs.EpochInfo:
      type: object
      properties:
        identifier:
          type: string
        start_time:
          type: string
          format: date-time
        duration:
          type: string
        current_epoch:
          type: string
          format: int64
        current_epoch_start_time:
          type: string
          format: date-time
        epoch_counting_started:
          type: boolean
        current_epoch_start_height:
          type: string
          format: int64
    quasarlabs.quasarnode.epochs.QueryCurrentEpochResponse:
      type: object
      properties:
        current_epoch:
          type: string
          format: int64
    quasarlabs.quasarnode.epochs.QueryEpochsInfoResponse:
      type: object
      properties:
        epochs:
          type: array
          items:
            type: object
            properties:
              identifier:
                type: string
              start_time:
                type: string
                format: date-time
              duration:
                type: string
              current_epoch:
                type: string
                format: int64
              current_epoch_start_time:
                type: string
                format: date-time
              epoch_counting_started:
                type: boolean
              current_epoch_start_height:
                type: string
                format: int64
    quasarlabs.quasarnode.intergamm.Params:
      type: object
      properties:
        quasar_denom_to_native_zone_id_map:
          type: object
          additionalProperties:
            type: string
        osmosis_denom_to_quasar_denom_map:
          type: object
          additionalProperties:
            type: string
        complete_zone_info_map:
          type: object
          additionalProperties:
            type: object
            properties:
              zone_route_info:
                type: object
                properties:
                  zone_id:
                    type: string
                    title: "zone ID: a unique ID for source zone of this route"
                  chain_id:
                    type: string
                    title: chain ID of the source zone
                  counterparty_zone_id:
                    type: string
                    title: "counterparty zone ID: a unique ID for destination zone of this route"
                  counterparty_chain_id:
                    type: string
                    title: chain ID of the destination zone
                  connection_id:
                    type: string
                    title: IBC connection ID from source to destination
                  port_id:
                    type: string
                    title: IBC port ID from source to destination (usually 'transfer')
                  channel_id:
                    type: string
                    title: IBC channel ID from source to destination
                  counterparty_connection_id:
                    type: string
                    title: IBC counterparty connection ID from destination to source
                  counterparty_port_id:
                    type: string
                    title: IBC counterparty port ID from destination to source (usually 'transfer')
                  counterparty_channel_id:
                    type: string
                    title: IBC counterparty channel ID from destination to source
                  counterparty_version:
                    type: string
                    title: IBC counterparty version
              next_zone_route_map:
                type: object
                additionalProperties:
                  type: object
                  properties:
                    zone_id:
                      type: string
                      title: "zone ID: a unique ID for source zone of this route"
                    chain_id:
                      type: string
                      title: chain ID of the source zone
                    counterparty_zone_id:
                      type: string
                      title: "counterparty zone ID: a unique ID for destination zone of this route"
                    counterparty_chain_id:
                      type: string
                      title: chain ID of the destination zone
                    connection_id:
                      type: string
                      title: IBC connection ID from source to destination
                    port_id:
                      type: string
                      title: IBC port ID from source to destination (usually 'transfer')
                    channel_id:
                      type: string
                      title: IBC channel ID from source to destination
                    counterparty_connection_id:
                      type: string
                      title: IBC counterparty connection ID from destination to source
                    counterparty_port_id:
                      type: string
                      title: IBC counterparty port ID from destination to source (usually 'transfer')
                    counterparty_channel_id:
                      type: string
                      title: IBC counterparty channel ID from destination to source
                    counterparty_version:
                      type: string
                      title: IBC counterparty version
            title: IntermediateReceiver
      description: Params defines the parameters for the module.
    quasarlabs.quasarnode.intergamm.PortInfo:
      type: object
      properties:
        portID:
          type: string
        channelID:
          type: string
        counterpartyChannelID:
          type: string
        connectionID:
          type: string
    quasarlabs.quasarnode.intergamm.QueryGetPortInfoResponse:
      type: object
      properties:
        portInfo:
          type: object
          properties:
            portID:
              type: string
            channelID:
              type: string
            counterpartyChannelID:
              type: string
            connectionID:
              type: string
    quasarlabs.quasarnode.intergamm.QueryICAAddressOnDenomNativeZoneResponse:
      type: object
      properties:
        icaAddress:
          type: string
    quasarlabs.quasarnode.intergamm.QueryICAAddressOnZoneResponse:
      type: object
      properties:
        icaAddress:
          type: string
    quasarlabs.quasarnode.intergamm.QueryInterchainAccountFromAddressResponse:
      type: object
      properties:
        interchain_account_address:
          type: string
    quasarlabs.quasarnode.intergamm.QueryParamsResponse:
      type: object
      properties:
        params:
          description: params holds all the parameters of this module.
          type: object
          properties:
            quasar_denom_to_native_zone_id_map:
              type: object
              additionalProperties:
                type: string
            osmosis_denom_to_quasar_denom_map:
              type: object
              additionalProperties:
                type: string
            complete_zone_info_map:
              type: object
              additionalProperties:
                type: object
                properties:
                  zone_route_info:
                    type: object
                    properties:
                      zone_id:
                        type: string
                        title: "zone ID: a unique ID for source zone of this route"
                      chain_id:
                        type: string
                        title: chain ID of the source zone
                      counterparty_zone_id:
                        type: string
                        title: "counterparty zone ID: a unique ID for destination zone of this route"
                      counterparty_chain_id:
                        type: string
                        title: chain ID of the destination zone
                      connection_id:
                        type: string
                        title: IBC connection ID from source to destination
                      port_id:
                        type: string
                        title: IBC port ID from source to destination (usually 'transfer')
                      channel_id:
                        type: string
                        title: IBC channel ID from source to destination
                      counterparty_connection_id:
                        type: string
                        title: IBC counterparty connection ID from destination to source
                      counterparty_port_id:
                        type: string
                        title: IBC counterparty port ID from destination to source (usually 'transfer')
                      counterparty_channel_id:
                        type: string
                        title: IBC counterparty channel ID from destination to source
                      counterparty_version:
                        type: string
                        title: IBC counterparty version
                  next_zone_route_map:
                    type: object
                    additionalProperties:
                      type: object
                      properties:
                        zone_id:
                          type: string
                          title: "zone ID: a unique ID for source zone of this route"
                        chain_id:
                          type: string
                          title: chain ID of the source zone
                        counterparty_zone_id:
                          type: string
                          title: "counterparty zone ID: a unique ID for destination zone of this route"
                        counterparty_chain_id:
                          type: string
                          title: chain ID of the destination zone
                        connection_id:
                          type: string
                          title: IBC connection ID from source to destination
                        port_id:
                          type: string
                          title: IBC port ID from source to destination (usually 'transfer')
                        channel_id:
                          type: string
                          title: IBC channel ID from source to destination
                        counterparty_connection_id:
                          type: string
                          title: IBC counterparty connection ID from destination to source
                        counterparty_port_id:
                          type: string
                          title: IBC counterparty port ID from destination to source (usually 'transfer')
                        counterparty_channel_id:
                          type: string
                          title: IBC counterparty channel ID from destination to source
                        counterparty_version:
                          type: string
                          title: IBC counterparty version
                title: IntermediateReceiver
      description: QueryParamsResponse is response type for the Query/Params RPC method.
    quasarlabs.quasarnode.intergamm.ZoneCompleteInfo:
      type: object
      properties:
        zone_route_info:
          type: object
          properties:
            zone_id:
              type: string
              title: "zone ID: a unique ID for source zone of this route"
            chain_id:
              type: string
              title: chain ID of the source zone
            counterparty_zone_id:
              type: string
              title: "counterparty zone ID: a unique ID for destination zone of this route"
            counterparty_chain_id:
              type: string
              title: chain ID of the destination zone
            connection_id:
              type: string
              title: IBC connection ID from source to destination
            port_id:
              type: string
              title: IBC port ID from source to destination (usually 'transfer')
            channel_id:
              type: string
              title: IBC channel ID from source to destination
            counterparty_connection_id:
              type: string
              title: IBC counterparty connection ID from destination to source
            counterparty_port_id:
              type: string
              title: IBC counterparty port ID from destination to source (usually 'transfer')
            counterparty_channel_id:
              type: string
              title: IBC counterparty channel ID from destination to source
            counterparty_version:
              type: string
              title: IBC counterparty version
        next_zone_route_map:
          type: object
          additionalProperties:
            type: object
            properties:
              zone_id:
                type: string
                title: "zone ID: a unique ID for source zone of this route"
              chain_id:
                type: string
                title: chain ID of the source zone
              counterparty_zone_id:
                type: string
                title: "counterparty zone ID: a unique ID for destination zone of this route"
              counterparty_chain_id:
                type: string
                title: chain ID of the destination zone
              connection_id:
                type: string
                title: IBC connection ID from source to destination
              port_id:
                type: string
                title: IBC port ID from source to destination (usually 'transfer')
              channel_id:
                type: string
                title: IBC channel ID from source to destination
              counterparty_connection_id:
                type: string
                title: IBC counterparty connection ID from destination to source
              counterparty_port_id:
                type: string
                title: IBC counterparty port ID from destination to source (usually 'transfer')
              counterparty_channel_id:
                type: string
                title: IBC counterparty channel ID from destination to source
              counterparty_version:
                type: string
                title: IBC counterparty version
      title: IntermediateReceiver
    quasarlabs.quasarnode.intergamm.ZoneRouteInfo:
      type: object
      properties:
        zone_id:
          type: string
          title: "zone ID: a unique ID for source zone of this route"
        chain_id:
          type: string
          title: chain ID of the source zone
        counterparty_zone_id:
          type: string
          title: "counterparty zone ID: a unique ID for destination zone of this route"
        counterparty_chain_id:
          type: string
          title: chain ID of the destination zone
        connection_id:
          type: string
          title: IBC connection ID from source to destination
        port_id:
          type: string
          title: IBC port ID from source to destination (usually 'transfer')
        channel_id:
          type: string
          title: IBC channel ID from source to destination
        counterparty_connection_id:
          type: string
          title: IBC counterparty connection ID from destination to source
        counterparty_port_id:
          type: string
          title: IBC counterparty port ID from destination to source (usually 'transfer')
        counterparty_channel_id:
          type: string
          title: IBC counterparty channel ID from destination to source
        counterparty_version:
          type: string
          title: IBC counterparty version
    cosmos.base.v1beta1.Coin:
      type: object
      properties:
        denom:
          type: string
        amount:
          type: string
      description: |-
        Coin defines a token with a denomination and an amount.

        NOTE: The amount field is an Int which implements the custom method
        signatures required by gogoproto.
    quasarlabs.quasarnode.orion.AccountInfo:
      type: object
      properties:
        name:
          type: string
        account:
          type: string
        balance:
          type: array
          items:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: >-
              Coin defines a token with a denomination and an amount.


              NOTE: The amount field is an Int which implements the custom method

              signatures required by gogoproto.
      title: AccountInfo is used for orion module reserve account detail
    quasarlabs.quasarnode.orion.GaugeLockInfo:
      type: object
      properties:
        gaugeID:
          type: string
          format: uint64
        isActive:
          type: boolean
        lockupDuration:
          type: string
        expectedApy:
          type: string
        startTime:
          type: string
          format: date-time
      title: >-
        GaugeLockInfo object is used to save the lockup period, associated
        approx apy

        and state whether it is active, and start time of this gauge to check the expected aPY

        on any given day. Multiple gaugeLockInfo objects will be associated with each LPPosition
    quasarlabs.quasarnode.orion.LpEpochPair:
      type: object
      properties:
        lpId:
          type: string
          format: uint64
        epochDay:
          type: string
          format: uint64
      description: LpEpochPair indicates the epoch day on which lpId was created.
    quasarlabs.quasarnode.orion.LpPosition:
      type: object
      properties:
        seqNo:
          type: string
          format: uint64
        lpID:
          type: string
          format: uint64
        lockID:
          type: string
          format: uint64
        state:
          type: string
          enum:
            - INIT
            - JOINING
            - JOINED
            - JOIN_FAILED
            - JOINING_TIMEOUT
            - EXITING
            - EXITED
            - EXIT_FAILED
            - EXITING_TIMEOUT
            - SETTLED
          default: INIT
        startTime:
          type: string
          format: date-time
        bondingStartEpochDay:
          type: string
          format: uint64
        bondDuration:
          type: string
          format: uint64
        unbondingStartEpochDay:
          type: string
          format: uint64
        unbondingDuration:
          type: string
          format: uint64
        poolID:
          type: string
          format: uint64
        lptoken:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        coins:
          type: array
          items:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: >-
              Coin defines a token with a denomination and an amount.


              NOTE: The amount field is an Int which implements the custom method

              signatures required by gogoproto.
        gaugelocks:
          type: array
          items:
            type: object
            properties:
              gaugeID:
                type: string
                format: uint64
              isActive:
                type: boolean
              lockupDuration:
                type: string
              expectedApy:
                type: string
              startTime:
                type: string
                format: date-time
            title: >-
              GaugeLockInfo object is used to save the lockup period, associated
              approx apy

              and state whether it is active, and start time of this gauge to check the expected aPY

              on any given day. Multiple gaugeLockInfo objects will be associated with each LPPosition
      description: >-
        LpPosition is used by the strategy during the the Lping activity. 

        Whenever orion module creates an LP position; an object of LpPosition will be created 

        for book keeping in the KV store.
    quasarlabs.quasarnode.orion.LpStat:
      type: object
      properties:
        lpCount:
          type: string
          format: uint64
        totalLPCoins:
          type: array
          items:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: >-
              Coin defines a token with a denomination and an amount.


              NOTE: The amount field is an Int which implements the custom method

              signatures required by gogoproto.
      title: >-
        LpStat is used to do the book keeping of Lping activity on a given
        epochday.

        Which includes, total number of Lping position and total LP tokens as []sdk.Coin
    quasarlabs.quasarnode.orion.LpState:
      type: string
      enum:
        - INIT
        - JOINING
        - JOINED
        - JOIN_FAILED
        - JOINING_TIMEOUT
        - EXITING
        - EXITED
        - EXIT_FAILED
        - EXITING_TIMEOUT
        - SETTLED
      default: INIT
    quasarlabs.quasarnode.orion.Params:
      type: object
      properties:
        perf_fee_per:
          type: string
        mgmt_fee_per:
          type: string
        lp_epoch_id:
          type: string
        destination_chain_id:
          type: string
        enabled:
          type: boolean
        white_listed_pools:
          type: array
          items:
            type: string
            format: uint64
        osmosis_local_info:
          type: object
          properties:
            local_zone_id:
              type: string
            connection_id:
              type: string
            chain_id:
              type: string
          description: Local Information of the other zone in the intergamm module.
      description: Params defines the parameters for the module.
    quasarlabs.quasarnode.orion.QueryGetLpPositionResponse:
      type: object
      properties:
        LpPosition:
          type: object
          properties:
            seqNo:
              type: string
              format: uint64
            lpID:
              type: string
              format: uint64
            lockID:
              type: string
              format: uint64
            state:
              type: string
              enum:
                - INIT
                - JOINING
                - JOINED
                - JOIN_FAILED
                - JOINING_TIMEOUT
                - EXITING
                - EXITED
                - EXIT_FAILED
                - EXITING_TIMEOUT
                - SETTLED
              default: INIT
            startTime:
              type: string
              format: date-time
            bondingStartEpochDay:
              type: string
              format: uint64
            bondDuration:
              type: string
              format: uint64
            unbondingStartEpochDay:
              type: string
              format: uint64
            unbondingDuration:
              type: string
              format: uint64
            poolID:
              type: string
              format: uint64
            lptoken:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom method

                signatures required by gogoproto.
            coins:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom method

                  signatures required by gogoproto.
            gaugelocks:
              type: array
              items:
                type: object
                properties:
                  gaugeID:
                    type: string
                    format: uint64
                  isActive:
                    type: boolean
                  lockupDuration:
                    type: string
                  expectedApy:
                    type: string
                  startTime:
                    type: string
                    format: date-time
                title: >-
                  GaugeLockInfo object is used to save the lockup period,
                  associated approx apy

                  and state whether it is active, and start time of this gauge to check the expected aPY

                  on any given day. Multiple gaugeLockInfo objects will be associated with each LPPosition
          description: >-
            LpPosition is used by the strategy during the the Lping activity. 

            Whenever orion module creates an LP position; an object of LpPosition will be created 

            for book keeping in the KV store.
    quasarlabs.quasarnode.orion.QueryGetLpStatResponse:
      type: object
      properties:
        LpStat:
          type: object
          properties:
            lpCount:
              type: string
              format: uint64
            totalLPCoins:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom method

                  signatures required by gogoproto.
          title: >-
            LpStat is used to do the book keeping of Lping activity on a given
            epochday.

            Which includes, total number of Lping position and total LP tokens as []sdk.Coin
    quasarlabs.quasarnode.orion.QueryGetRewardCollectionResponse:
      type: object
      properties:
        RewardCollection:
          type: object
          properties:
            timeCollected:
              type: string
              format: date-time
            coins:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom method

                  signatures required by gogoproto.
          description: >-
            RewardCollection is used to do the book keeping of the reward

            collected from the osmosis on a given epochday. This is further used for the approx distribution.
    quasarlabs.quasarnode.orion.QueryListActiveLpsResponse:
      type: object
      properties:
        lpIds:
          type: array
          items:
            type: string
            format: uint64
    quasarlabs.quasarnode.orion.QueryListModuleAccountsResponse:
      type: object
      properties:
        accInfo:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              account:
                type: string
              balance:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom method

                    signatures required by gogoproto.
            title: AccountInfo is used for orion module reserve account detail
    quasarlabs.quasarnode.orion.QueryLpEpochPairsResponse:
      type: object
      properties:
        lpEpochPairs:
          type: array
          items:
            type: object
            properties:
              lpId:
                type: string
                format: uint64
              epochDay:
                type: string
                format: uint64
            description: LpEpochPair indicates the epoch day on which lpId was created.
    quasarlabs.quasarnode.orion.QueryParamsResponse:
      type: object
      properties:
        params:
          description: params holds all the parameters of this module.
          type: object
          properties:
            perf_fee_per:
              type: string
            mgmt_fee_per:
              type: string
            lp_epoch_id:
              type: string
            destination_chain_id:
              type: string
            enabled:
              type: boolean
            white_listed_pools:
              type: array
              items:
                type: string
                format: uint64
            osmosis_local_info:
              type: object
              properties:
                local_zone_id:
                  type: string
                connection_id:
                  type: string
                chain_id:
                  type: string
              description: Local Information of the other zone in the intergamm module.
      description: QueryParamsResponse is response type for the Query/Params RPC method.
    quasarlabs.quasarnode.orion.QueryReserveBalanceAllResponse:
      type: object
      properties:
        accInfo:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              account:
                type: string
              balance:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom method

                    signatures required by gogoproto.
            title: AccountInfo is used for orion module reserve account detail
    quasarlabs.quasarnode.orion.RewardCollection:
      type: object
      properties:
        timeCollected:
          type: string
          format: date-time
        coins:
          type: array
          items:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: >-
              Coin defines a token with a denomination and an amount.


              NOTE: The amount field is an Int which implements the custom method

              signatures required by gogoproto.
      description: >-
        RewardCollection is used to do the book keeping of the reward

        collected from the osmosis on a given epochday. This is further used for the approx distribution.
    quasarlabs.quasarnode.orion.ZoneLocalInfo:
      type: object
      properties:
        local_zone_id:
          type: string
        connection_id:
          type: string
        chain_id:
          type: string
      description: Local Information of the other zone in the intergamm module.
    quasarlabs.quasarnode.qbank.DepositInfo:
      type: object
      properties:
        vaultID:
          type: string
        epochDay:
          type: string
          format: uint64
        lockupPeriod:
          type: string
          enum:
            - Invalid
            - Days_7
            - Days_21
            - Months_1
            - Months_3
          default: Invalid
          title: LockupTypes defines different types of locktypes to be used in the system
            for users deposit
        depositorAccAddress:
          type: string
        coin:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
      title: DepositInfo represents the state of a particular deposit
    quasarlabs.quasarnode.qbank.LockupTypes:
      type: string
      enum:
        - Invalid
        - Days_7
        - Days_21
        - Months_1
        - Months_3
      default: Invalid
      title: LockupTypes defines different types of locktypes to be used in the system
        for users deposit
    quasarlabs.quasarnode.qbank.Params:
      type: object
      properties:
        enabled:
          type: boolean
        min_orion_epoch_denom_dollar_deposit:
          type: string
        orion_epoch_identifier:
          type: string
        white_listed_denoms_in_orion:
          type: array
          items:
            type: object
            properties:
              origin_name:
                type: string
              onehop_quasar:
                type: string
              onehop_osmo:
                type: string
      description: Params defines the parameters for the module.
    quasarlabs.quasarnode.qbank.QCoins:
      type: object
      properties:
        coins:
          type: array
          items:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: >-
              Coin defines a token with a denomination and an amount.


              NOTE: The amount field is an Int which implements the custom method

              signatures required by gogoproto.
      description: QCoins defines encoding/decoding for the slice of sdk.coins to be
        used in KV stores.
    quasarlabs.quasarnode.qbank.QueryGetAllDepsoitInfosResponse:
      type: object
      properties:
        depositInfos:
          type: array
          items:
            type: object
            properties:
              vaultID:
                type: string
              epochDay:
                type: string
                format: uint64
              lockupPeriod:
                type: string
                enum:
                  - Invalid
                  - Days_7
                  - Days_21
                  - Months_1
                  - Months_3
                default: Invalid
                title: LockupTypes defines different types of locktypes to be used in the system
                  for users deposit
              depositorAccAddress:
                type: string
              coin:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom method

                  signatures required by gogoproto.
            title: DepositInfo represents the state of a particular deposit
    quasarlabs.quasarnode.qbank.QueryParamsResponse:
      type: object
      properties:
        params:
          description: params holds all the parameters of this module.
          type: object
          properties:
            enabled:
              type: boolean
            min_orion_epoch_denom_dollar_deposit:
              type: string
            orion_epoch_identifier:
              type: string
            white_listed_denoms_in_orion:
              type: array
              items:
                type: object
                properties:
                  origin_name:
                    type: string
                  onehop_quasar:
                    type: string
                  onehop_osmo:
                    type: string
      description: QueryParamsResponse is response type for the Query/Params RPC method.
    quasarlabs.quasarnode.qbank.QueryTotalClaimedResponse:
      type: object
      properties:
        coins:
          type: object
          properties:
            coins:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom method

                  signatures required by gogoproto.
          description: QCoins defines encoding/decoding for the slice of sdk.coins to be
            used in KV stores.
    quasarlabs.quasarnode.qbank.QueryTotalWithdrawResponse:
      type: object
      properties:
        coins:
          type: object
          properties:
            coins:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom method

                  signatures required by gogoproto.
          description: QCoins defines encoding/decoding for the slice of sdk.coins to be
            used in KV stores.
    quasarlabs.quasarnode.qbank.QueryUserClaimRewardsResponse:
      type: object
      properties:
        coins:
          type: object
          properties:
            coins:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom method

                  signatures required by gogoproto.
          description: QCoins defines encoding/decoding for the slice of sdk.coins to be
            used in KV stores.
    quasarlabs.quasarnode.qbank.QueryUserDenomDepositResponse:
      type: object
      properties:
        amount:
          type: string
          format: uint64
    quasarlabs.quasarnode.qbank.QueryUserDepositResponse:
      type: object
      properties:
        coins:
          type: object
          properties:
            coins:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom method

                  signatures required by gogoproto.
          description: QCoins defines encoding/decoding for the slice of sdk.coins to be
            used in KV stores.
    quasarlabs.quasarnode.qbank.QueryWithdrawableResponse:
      type: object
      properties:
        coin:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
    quasarlabs.quasarnode.qbank.WhiteListedDenomInOrion:
      type: object
      properties:
        origin_name:
          type: string
        onehop_quasar:
          type: string
        onehop_osmo:
          type: string
    cosmos.base.query.v1beta1.PageRequest:
      type: object
      properties:
        key:
          type: string
          format: byte
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
        offset:
          type: string
          format: uint64
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key should

            be set.
        limit:
          type: string
          format: uint64
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
        count_total:
          type: boolean
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in UIs.

            count_total is only respected when offset is used. It is ignored when key

            is set.
        reverse:
          type: boolean
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
      description: |-
        message SomeRequest {
                 Foo some_parameter = 1;
                 PageRequest pagination = 2;
         }
      title: |-
        PageRequest is to be embedded in gRPC request messages for efficient
        pagination. Ex:
    cosmos.base.query.v1beta1.PageResponse:
      type: object
      properties:
        next_key:
          type: string
          format: byte
          description: |-
            next_key is the key to be passed to PageRequest.key to
            query the next page most efficiently. It will be empty if
            there are no more results.
        total:
          type: string
          format: uint64
          title: >-
            total is total number of results available if
            PageRequest.count_total

            was set, its value is undefined otherwise
      description: |-
        PageResponse is to be embedded in gRPC response messages where the
        corresponding request message has used PageRequest.

         message SomeResponse {
                 repeated Bar results = 1;
                 PageResponse page = 2;
         }
    cosmos.base.v1beta1.DecCoin:
      type: object
      properties:
        denom:
          type: string
        amount:
          type: string
      description: |-
        DecCoin defines a token with a denomination and a decimal amount.

        NOTE: The amount field is an Dec which implements the custom method
        signatures required by gogoproto.
    ibc.core.client.v1.Height:
      type: object
      properties:
        revision_number:
          type: string
          format: uint64
          title: the revision that the client is currently on
        revision_height:
          type: string
          format: uint64
          title: the height within the given revision
      description: >-
        Normally the RevisionHeight is incremented at each height while keeping

        RevisionNumber the same. However some consensus algorithms may choose to

        reset the height in certain conditions e.g. hard forks, state-machine

        breaking changes In these cases, the RevisionNumber is incremented so that

        height continues to be monitonically increasing even as the RevisionHeight

        gets reset
      title: >-
        Height is a monotonically increasing data type

        that can be compared against another Height for the purposes of updating and

        freezing clients
    osmosis.epochs.v1beta1.EpochInfo:
      type: object
      properties:
        identifier:
          type: string
          description: identifier is a unique reference to this particular timer.
        start_time:
          type: string
          format: date-time
          description: >-
            start_time is the time at which the timer first ever ticks.

            If start_time is in the future, the epoch will not begin until the start

            time.
        duration:
          type: string
          description: |-
            duration is the time in between epoch ticks.
            In order for intended behavior to be met, duration should
            be greater than the chains expected block time.
            Duration must be non-zero.
        current_epoch:
          type: string
          format: int64
          description: >-
            current_epoch is the current epoch number, or in other words,

            how many times has the timer 'ticked'.

            The first tick (current_epoch=1) is defined as

            the first block whose blocktime is greater than the EpochInfo start_time.
        current_epoch_start_time:
          type: string
          format: date-time
          description: >-
            current_epoch_start_time describes the start time of the current
            timer

            interval. The interval is (current_epoch_start_time,

            current_epoch_start_time + duration] When the timer ticks, this is set to

            current_epoch_start_time = last_epoch_start_time + duration only one timer

            tick for a given identifier can occur per block.


            NOTE! The current_epoch_start_time may diverge significantly from the

            wall-clock time the epoch began at. Wall-clock time of epoch start may be

            >> current_epoch_start_time. Suppose current_epoch_start_time = 10,

            duration = 5. Suppose the chain goes offline at t=14, and comes back online

            at t=30, and produces blocks at every successive time. (t=31, 32, etc.)

            * The t=30 block will start the epoch for (10, 15]

            * The t=31 block will start the epoch for (15, 20]

            * The t=32 block will start the epoch for (20, 25]

            * The t=33 block will start the epoch for (25, 30]

            * The t=34 block will start the epoch for (30, 35]

            * The **t=36** block will start the epoch for (35, 40]
        epoch_counting_started:
          type: boolean
          description: |-
            epoch_counting_started is a boolean, that indicates whether this
            epoch timer has began yet.
        current_epoch_start_height:
          type: string
          format: int64
          title: >-
            current_epoch_start_height is the block height at which the current
            epoch

            started. (The block height at which the timer last ticked)
      description: |-
        EpochInfo is a struct that describes the data going into
        a timer defined by the x/epochs module.
    osmosis.gamm.v1beta1.Pool:
      type: object
      properties:
        address:
          type: string
        id:
          type: string
          format: uint64
        pool_params:
          type: object
          properties:
            swap_fee:
              type: string
            exit_fee:
              type: string
            smooth_weight_change_params:
              type: object
              properties:
                start_time:
                  type: string
                  format: date-time
                  description: >-
                    The start time for beginning the weight change.

                    If a parameter change / pool instantiation leaves this blank,

                    it should be generated by the state_machine as the current time.
                duration:
                  type: string
                  title: Duration for the weights to change over
                initial_pool_weights:
                  type: array
                  items:
                    type: object
                    properties:
                      token:
                        description: >-
                          Coins we are talking about,

                          the denomination must be unique amongst all PoolAssets for this pool.
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                      weight:
                        type: string
                        title: Weight that is not normalized. This weight must be less than 2^50
                    description: >-
                      Pool asset is an internal struct that combines the amount
                      of the

                      token in the pool, and its balancer weight.

                      This is an awkward packaging of data,

                      and should be revisited in a future state migration.
                  description: >-
                    The initial pool weights. These are copied from the pool's
                    settings

                    at the time of weight change instantiation.

                    The amount PoolAsset.token.amount field is ignored if present,

                    future type refactorings should just have a type with the denom & weight

                    here.
                target_pool_weights:
                  type: array
                  items:
                    type: object
                    properties:
                      token:
                        description: >-
                          Coins we are talking about,

                          the denomination must be unique amongst all PoolAssets for this pool.
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                      weight:
                        type: string
                        title: Weight that is not normalized. This weight must be less than 2^50
                    description: >-
                      Pool asset is an internal struct that combines the amount
                      of the

                      token in the pool, and its balancer weight.

                      This is an awkward packaging of data,

                      and should be revisited in a future state migration.
                  description: >-
                    The target pool weights. The pool weights will change
                    linearly with respect

                    to time between start_time, and start_time + duration. The amount

                    PoolAsset.token.amount field is ignored if present, future type

                    refactorings should just have a type with the denom & weight here.
              title: >-
                Parameters for changing the weights in a balancer pool smoothly
                from

                a start weight and end weight over a period of time.

                Currently, the only smooth change supported is linear changing between

                the two weights, but more types may be added in the future.

                When these parameters are set, the weight w(t) for pool time `t` is the

                following:
                  t <= start_time: w(t) = initial_pool_weights
                  start_time < t <= start_time + duration:
                    w(t) = initial_pool_weights + (t - start_time) *
                      (target_pool_weights - initial_pool_weights) / (duration)
                  t > start_time + duration: w(t) = target_pool_weights
          description: >-
            PoolParams defined the parameters that will be managed by the pool

            governance in the future. This params are not managed by the chain

            governance. Instead they will be managed by the token holders of the pool.

            The pool's token holders are specified in future_pool_governor.
        future_pool_governor:
          type: string
          title: >-
            This string specifies who will govern the pool in the future.

            Valid forms of this are:

            {token name},{duration}

            {duration}

            where {token name} if specified is the token which determines the

            governor, and if not specified is the LP token for this pool.duration is

            a time specified as 0w,1w,2w, etc. which specifies how long the token

            would need to be locked up to count in governance. 0w means no lockup.

            TODO: Further improve these docs
        total_shares:
          title: sum of all LP tokens sent out
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        pool_assets:
          type: array
          items:
            type: object
            properties:
              token:
                description: >-
                  Coins we are talking about,

                  the denomination must be unique amongst all PoolAssets for this pool.
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
              weight:
                type: string
                title: Weight that is not normalized. This weight must be less than 2^50
            description: |-
              Pool asset is an internal struct that combines the amount of the
              token in the pool, and its balancer weight.
              This is an awkward packaging of data,
              and should be revisited in a future state migration.
          title: |-
            These are assumed to be sorted by denomiation.
            They contain the pool asset and the information about the weight
        total_weight:
          type: string
          title: sum of all non-normalized pool weights
    osmosis.gamm.v1beta1.PoolAsset:
      type: object
      properties:
        token:
          description: >-
            Coins we are talking about,

            the denomination must be unique amongst all PoolAssets for this pool.
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
        weight:
          type: string
          title: Weight that is not normalized. This weight must be less than 2^50
      description: |-
        Pool asset is an internal struct that combines the amount of the
        token in the pool, and its balancer weight.
        This is an awkward packaging of data,
        and should be revisited in a future state migration.
    osmosis.gamm.v1beta1.PoolParams:
      type: object
      properties:
        swap_fee:
          type: string
        exit_fee:
          type: string
        smooth_weight_change_params:
          type: object
          properties:
            start_time:
              type: string
              format: date-time
              description: |-
                The start time for beginning the weight change.
                If a parameter change / pool instantiation leaves this blank,
                it should be generated by the state_machine as the current time.
            duration:
              type: string
              title: Duration for the weights to change over
            initial_pool_weights:
              type: array
              items:
                type: object
                properties:
                  token:
                    description: >-
                      Coins we are talking about,

                      the denomination must be unique amongst all PoolAssets for this pool.
                    type: object
                    properties:
                      denom:
                        type: string
                      amount:
                        type: string
                  weight:
                    type: string
                    title: Weight that is not normalized. This weight must be less than 2^50
                description: >-
                  Pool asset is an internal struct that combines the amount of
                  the

                  token in the pool, and its balancer weight.

                  This is an awkward packaging of data,

                  and should be revisited in a future state migration.
              description: >-
                The initial pool weights. These are copied from the pool's
                settings

                at the time of weight change instantiation.

                The amount PoolAsset.token.amount field is ignored if present,

                future type refactorings should just have a type with the denom & weight

                here.
            target_pool_weights:
              type: array
              items:
                type: object
                properties:
                  token:
                    description: >-
                      Coins we are talking about,

                      the denomination must be unique amongst all PoolAssets for this pool.
                    type: object
                    properties:
                      denom:
                        type: string
                      amount:
                        type: string
                  weight:
                    type: string
                    title: Weight that is not normalized. This weight must be less than 2^50
                description: >-
                  Pool asset is an internal struct that combines the amount of
                  the

                  token in the pool, and its balancer weight.

                  This is an awkward packaging of data,

                  and should be revisited in a future state migration.
              description: >-
                The target pool weights. The pool weights will change linearly
                with respect

                to time between start_time, and start_time + duration. The amount

                PoolAsset.token.amount field is ignored if present, future type

                refactorings should just have a type with the denom & weight here.
          title: >-
            Parameters for changing the weights in a balancer pool smoothly from

            a start weight and end weight over a period of time.

            Currently, the only smooth change supported is linear changing between

            the two weights, but more types may be added in the future.

            When these parameters are set, the weight w(t) for pool time `t` is the

            following:
              t <= start_time: w(t) = initial_pool_weights
              start_time < t <= start_time + duration:
                w(t) = initial_pool_weights + (t - start_time) *
                  (target_pool_weights - initial_pool_weights) / (duration)
              t > start_time + duration: w(t) = target_pool_weights
      description: >-
        PoolParams defined the parameters that will be managed by the pool

        governance in the future. This params are not managed by the chain

        governance. Instead they will be managed by the token holders of the pool.

        The pool's token holders are specified in future_pool_governor.
    osmosis.gamm.v1beta1.SmoothWeightChangeParams:
      type: object
      properties:
        start_time:
          type: string
          format: date-time
          description: |-
            The start time for beginning the weight change.
            If a parameter change / pool instantiation leaves this blank,
            it should be generated by the state_machine as the current time.
        duration:
          type: string
          title: Duration for the weights to change over
        initial_pool_weights:
          type: array
          items:
            type: object
            properties:
              token:
                description: >-
                  Coins we are talking about,

                  the denomination must be unique amongst all PoolAssets for this pool.
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
              weight:
                type: string
                title: Weight that is not normalized. This weight must be less than 2^50
            description: |-
              Pool asset is an internal struct that combines the amount of the
              token in the pool, and its balancer weight.
              This is an awkward packaging of data,
              and should be revisited in a future state migration.
          description: >-
            The initial pool weights. These are copied from the pool's settings

            at the time of weight change instantiation.

            The amount PoolAsset.token.amount field is ignored if present,

            future type refactorings should just have a type with the denom & weight

            here.
        target_pool_weights:
          type: array
          items:
            type: object
            properties:
              token:
                description: >-
                  Coins we are talking about,

                  the denomination must be unique amongst all PoolAssets for this pool.
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
              weight:
                type: string
                title: Weight that is not normalized. This weight must be less than 2^50
            description: |-
              Pool asset is an internal struct that combines the amount of the
              token in the pool, and its balancer weight.
              This is an awkward packaging of data,
              and should be revisited in a future state migration.
          description: >-
            The target pool weights. The pool weights will change linearly with
            respect

            to time between start_time, and start_time + duration. The amount

            PoolAsset.token.amount field is ignored if present, future type

            refactorings should just have a type with the denom & weight here.
      title: |-
        Parameters for changing the weights in a balancer pool smoothly from
        a start weight and end weight over a period of time.
        Currently, the only smooth change supported is linear changing between
        the two weights, but more types may be added in the future.
        When these parameters are set, the weight w(t) for pool time `t` is the
        following:
          t <= start_time: w(t) = initial_pool_weights
          start_time < t <= start_time + duration:
            w(t) = initial_pool_weights + (t - start_time) *
              (target_pool_weights - initial_pool_weights) / (duration)
          t > start_time + duration: w(t) = target_pool_weights
    osmosis.mint.v1beta1.DistributionProportions:
      type: object
      properties:
        staking:
          type: string
          description: >-
            staking defines the proportion of the minted mint_denom that is to
            be

            allocated as staking rewards.
        pool_incentives:
          type: string
          description: >-
            pool_incentives defines the proportion of the minted mint_denom that
            is

            to be allocated as pool incentives.
        developer_rewards:
          type: string
          description: >-
            developer_rewards defines the proportion of the minted mint_denom
            that is

            to be allocated to developer rewards address.
        community_pool:
          type: string
          description: >-
            community_pool defines the proportion of the minted mint_denom that
            is

            to be allocated to the community pool.
      description: >-
        DistributionProportions defines the distribution proportions of the
        minted

        denom. In other words, defines which stakeholders will receive the minted

        denoms and how much.
    osmosis.mint.v1beta1.Params:
      type: object
      properties:
        mint_denom:
          type: string
          description: mint_denom is the denom of the coin to mint.
        genesis_epoch_provisions:
          type: string
          description: genesis_epoch_provisions epoch provisions from the first epoch.
        epoch_identifier:
          type: string
          description: epoch_identifier mint epoch identifier e.g. (day, week).
        reduction_period_in_epochs:
          type: string
          format: int64
          description: |-
            reduction_period_in_epochs the number of epochs it takes
            to reduce the rewards.
        reduction_factor:
          type: string
          description: |-
            reduction_factor is the reduction multiplier to execute
            at the end of each period set by reduction_period_in_epochs.
        distribution_proportions:
          description: >-
            distribution_proportions defines the distribution proportions of the
            minted

            denom. In other words, defines which stakeholders will receive the minted

            denoms and how much.
          type: object
          properties:
            staking:
              type: string
              description: >-
                staking defines the proportion of the minted mint_denom that is
                to be

                allocated as staking rewards.
            pool_incentives:
              type: string
              description: >-
                pool_incentives defines the proportion of the minted mint_denom
                that is

                to be allocated as pool incentives.
            developer_rewards:
              type: string
              description: >-
                developer_rewards defines the proportion of the minted
                mint_denom that is

                to be allocated to developer rewards address.
            community_pool:
              type: string
              description: >-
                community_pool defines the proportion of the minted mint_denom
                that is

                to be allocated to the community pool.
        weighted_developer_rewards_receivers:
          type: array
          items:
            type: object
            properties:
              address:
                type: string
              weight:
                type: string
            description: >-
              WeightedAddress represents an address with a weight assigned to
              it.

              The weight is used to determine the proportion of the total minted

              tokens to be minted to the address.
          description: >-
            weighted_developer_rewards_receivers is the address to receive
            developer

            rewards with weights assignedt to each address. The final amount that each

            address receives is: epoch_provisions *

            distribution_proportions.developer_rewards * Address's Weight.
        minting_rewards_distribution_start_epoch:
          type: string
          format: int64
          title: >-
            minting_rewards_distribution_start_epoch start epoch to distribute
            minting

            rewards
      description: Params holds parameters for the x/mint module.
    osmosis.mint.v1beta1.WeightedAddress:
      type: object
      properties:
        address:
          type: string
        weight:
          type: string
      description: |-
        WeightedAddress represents an address with a weight assigned to it.
        The weight is used to determine the proportion of the total minted
        tokens to be minted to the address.
    osmosis.poolincentives.v1beta1.DistrInfo:
      type: object
      properties:
        total_weight:
          type: string
        records:
          type: array
          items:
            type: object
            properties:
              gauge_id:
                type: string
                format: uint64
              weight:
                type: string
    osmosis.poolincentives.v1beta1.DistrRecord:
      type: object
      properties:
        gauge_id:
          type: string
          format: uint64
        weight:
          type: string
    osmosis.poolincentives.v1beta1.IncentivizedPool:
      type: object
      properties:
        pool_id:
          type: string
          format: uint64
        lockable_duration:
          type: string
        gauge_id:
          type: string
          format: uint64
    quasarlabs.quasarnode.qoracle.BandchainParams:
      type: object
      properties:
        oracle_ibc_params:
          type: object
          properties:
            authorized_channel:
              type: string
            timeout_height:
              type: object
              properties:
                revision_number:
                  type: string
                  format: uint64
                  title: the revision that the client is currently on
                revision_height:
                  type: string
                  format: uint64
                  title: the height within the given revision
              description: >-
                Normally the RevisionHeight is incremented at each height while
                keeping

                RevisionNumber the same. However some consensus algorithms may choose to

                reset the height in certain conditions e.g. hard forks, state-machine

                breaking changes In these cases, the RevisionNumber is incremented so that

                height continues to be monitonically increasing even as the RevisionHeight

                gets reset
              title: >-
                Height is a monotonically increasing data type

                that can be compared against another Height for the purposes of updating and

                freezing clients
            timeout_timestamp:
              type: string
              format: uint64
        coin_rates_params:
          type: object
          properties:
            epoch_identifier:
              type: string
            symbols:
              type: array
              items:
                type: string
            script_params:
              type: object
              properties:
                script_id:
                  type: string
                  format: uint64
                ask_count:
                  type: string
                  format: uint64
                min_count:
                  type: string
                  format: uint64
                fee_limit:
                  type: array
                  items:
                    type: object
                    properties:
                      denom:
                        type: string
                      amount:
                        type: string
                    description: >-
                      Coin defines a token with a denomination and an amount.


                      NOTE: The amount field is an Int which implements the custom method

                      signatures required by gogoproto.
                prepare_gas:
                  type: string
                  format: uint64
                execute_gas:
                  type: string
                  format: uint64
    quasarlabs.quasarnode.qoracle.CoinRatesParams:
      type: object
      properties:
        epoch_identifier:
          type: string
        symbols:
          type: array
          items:
            type: string
        script_params:
          type: object
          properties:
            script_id:
              type: string
              format: uint64
            ask_count:
              type: string
              format: uint64
            min_count:
              type: string
              format: uint64
            fee_limit:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom method

                  signatures required by gogoproto.
            prepare_gas:
              type: string
              format: uint64
            execute_gas:
              type: string
              format: uint64
    quasarlabs.quasarnode.qoracle.DenomPriceMapping:
      type: object
      properties:
        denom:
          type: string
        oracle_denom:
          type: string
        multiplier:
          type: string
    quasarlabs.quasarnode.qoracle.IBCParams:
      type: object
      properties:
        authorized_channel:
          type: string
        timeout_height:
          type: object
          properties:
            revision_number:
              type: string
              format: uint64
              title: the revision that the client is currently on
            revision_height:
              type: string
              format: uint64
              title: the height within the given revision
          description: >-
            Normally the RevisionHeight is incremented at each height while
            keeping

            RevisionNumber the same. However some consensus algorithms may choose to

            reset the height in certain conditions e.g. hard forks, state-machine

            breaking changes In these cases, the RevisionNumber is incremented so that

            height continues to be monitonically increasing even as the RevisionHeight

            gets reset
          title: >-
            Height is a monotonically increasing data type

            that can be compared against another Height for the purposes of updating and

            freezing clients
        timeout_timestamp:
          type: string
          format: uint64
    quasarlabs.quasarnode.qoracle.OneHopIbcDenomMapping:
      type: object
      properties:
        originName:
          type: string
        quasar:
          type: string
        osmo:
          type: string
    quasarlabs.quasarnode.qoracle.OracleScriptParams:
      type: object
      properties:
        script_id:
          type: string
          format: uint64
        ask_count:
          type: string
          format: uint64
        min_count:
          type: string
          format: uint64
        fee_limit:
          type: array
          items:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: >-
              Coin defines a token with a denomination and an amount.


              NOTE: The amount field is an Int which implements the custom method

              signatures required by gogoproto.
        prepare_gas:
          type: string
          format: uint64
        execute_gas:
          type: string
          format: uint64
    quasarlabs.quasarnode.qoracle.OracleScriptState:
      type: object
      properties:
        call_data:
          type: object
          properties:
            type_url:
              type: string
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types that they

                expect it to use in the context of Any. However, for URLs which use the

                scheme `http`, `https`, or no scheme, one can optionally set up a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the official

                protobuf release, and it is not used for type URLs beginning with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might be

                used with implementation specific semantics.
            value:
              type: string
              format: byte
              description: Must be a valid serialized protocol buffer of the above specified
                type.
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the form

            of utility functions or additional generated methods of the Any type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

            Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

            Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := anypb.New(foo)
                 if err != nil {
                   ...
                 }
                 ...
                 foo := &pb.Foo{}
                 if err := any.UnmarshalTo(foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON


            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
        request_packet_sequence:
          type: string
          format: uint64
        oracle_request_id:
          type: string
          format: uint64
        result_packet_sequence:
          type: string
          format: uint64
        result:
          type: object
          properties:
            type_url:
              type: string
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types that they

                expect it to use in the context of Any. However, for URLs which use the

                scheme `http`, `https`, or no scheme, one can optionally set up a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the official

                protobuf release, and it is not used for type URLs beginning with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might be

                used with implementation specific semantics.
            value:
              type: string
              format: byte
              description: Must be a valid serialized protocol buffer of the above specified
                type.
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the form

            of utility functions or additional generated methods of the Any type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

            Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

            Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := anypb.New(foo)
                 if err != nil {
                   ...
                 }
                 ...
                 foo := &pb.Foo{}
                 if err := any.UnmarshalTo(foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON


            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
        failed:
          type: boolean
        updated_at_height:
          type: string
          format: int64
    quasarlabs.quasarnode.qoracle.OsmosisParams:
      type: object
      properties:
        icq_params:
          type: object
          properties:
            authorized_channel:
              type: string
            timeout_height:
              type: object
              properties:
                revision_number:
                  type: string
                  format: uint64
                  title: the revision that the client is currently on
                revision_height:
                  type: string
                  format: uint64
                  title: the height within the given revision
              description: >-
                Normally the RevisionHeight is incremented at each height while
                keeping

                RevisionNumber the same. However some consensus algorithms may choose to

                reset the height in certain conditions e.g. hard forks, state-machine

                breaking changes In these cases, the RevisionNumber is incremented so that

                height continues to be monitonically increasing even as the RevisionHeight

                gets reset
              title: >-
                Height is a monotonically increasing data type

                that can be compared against another Height for the purposes of updating and

                freezing clients
            timeout_timestamp:
              type: string
              format: uint64
        epoch_identifier:
          type: string
    quasarlabs.quasarnode.qoracle.OsmosisPool:
      type: object
      properties:
        pool_info:
          type: object
          properties:
            address:
              type: string
            id:
              type: string
              format: uint64
            pool_params:
              type: object
              properties:
                swap_fee:
                  type: string
                exit_fee:
                  type: string
                smooth_weight_change_params:
                  type: object
                  properties:
                    start_time:
                      type: string
                      format: date-time
                      description: >-
                        The start time for beginning the weight change.

                        If a parameter change / pool instantiation leaves this blank,

                        it should be generated by the state_machine as the current time.
                    duration:
                      type: string
                      title: Duration for the weights to change over
                    initial_pool_weights:
                      type: array
                      items:
                        type: object
                        properties:
                          token:
                            description: >-
                              Coins we are talking about,

                              the denomination must be unique amongst all PoolAssets for this pool.
                            type: object
                            properties:
                              denom:
                                type: string
                              amount:
                                type: string
                          weight:
                            type: string
                            title: Weight that is not normalized. This weight must be less than 2^50
                        description: >-
                          Pool asset is an internal struct that combines the
                          amount of the

                          token in the pool, and its balancer weight.

                          This is an awkward packaging of data,

                          and should be revisited in a future state migration.
                      description: >-
                        The initial pool weights. These are copied from the
                        pool's settings

                        at the time of weight change instantiation.

                        The amount PoolAsset.token.amount field is ignored if present,

                        future type refactorings should just have a type with the denom & weight

                        here.
                    target_pool_weights:
                      type: array
                      items:
                        type: object
                        properties:
                          token:
                            description: >-
                              Coins we are talking about,

                              the denomination must be unique amongst all PoolAssets for this pool.
                            type: object
                            properties:
                              denom:
                                type: string
                              amount:
                                type: string
                          weight:
                            type: string
                            title: Weight that is not normalized. This weight must be less than 2^50
                        description: >-
                          Pool asset is an internal struct that combines the
                          amount of the

                          token in the pool, and its balancer weight.

                          This is an awkward packaging of data,

                          and should be revisited in a future state migration.
                      description: >-
                        The target pool weights. The pool weights will change
                        linearly with respect

                        to time between start_time, and start_time + duration. The amount

                        PoolAsset.token.amount field is ignored if present, future type

                        refactorings should just have a type with the denom & weight here.
                  title: >-
                    Parameters for changing the weights in a balancer pool
                    smoothly from

                    a start weight and end weight over a period of time.

                    Currently, the only smooth change supported is linear changing between

                    the two weights, but more types may be added in the future.

                    When these parameters are set, the weight w(t) for pool time `t` is the

                    following:
                      t <= start_time: w(t) = initial_pool_weights
                      start_time < t <= start_time + duration:
                        w(t) = initial_pool_weights + (t - start_time) *
                          (target_pool_weights - initial_pool_weights) / (duration)
                      t > start_time + duration: w(t) = target_pool_weights
              description: >-
                PoolParams defined the parameters that will be managed by the
                pool

                governance in the future. This params are not managed by the chain

                governance. Instead they will be managed by the token holders of the pool.

                The pool's token holders are specified in future_pool_governor.
            future_pool_governor:
              type: string
              title: >-
                This string specifies who will govern the pool in the future.

                Valid forms of this are:

                {token name},{duration}

                {duration}

                where {token name} if specified is the token which determines the

                governor, and if not specified is the LP token for this pool.duration is

                a time specified as 0w,1w,2w, etc. which specifies how long the token

                would need to be locked up to count in governance. 0w means no lockup.

                TODO: Further improve these docs
            total_shares:
              title: sum of all LP tokens sent out
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom method

                signatures required by gogoproto.
            pool_assets:
              type: array
              items:
                type: object
                properties:
                  token:
                    description: >-
                      Coins we are talking about,

                      the denomination must be unique amongst all PoolAssets for this pool.
                    type: object
                    properties:
                      denom:
                        type: string
                      amount:
                        type: string
                  weight:
                    type: string
                    title: Weight that is not normalized. This weight must be less than 2^50
                description: >-
                  Pool asset is an internal struct that combines the amount of
                  the

                  token in the pool, and its balancer weight.

                  This is an awkward packaging of data,

                  and should be revisited in a future state migration.
              title: |-
                These are assumed to be sorted by denomiation.
                They contain the pool asset and the information about the weight
            total_weight:
              type: string
              title: sum of all non-normalized pool weights
        metrics:
          type: object
          properties:
            apy:
              type: string
              format: byte
            tvl:
              type: string
              format: byte
    quasarlabs.quasarnode.qoracle.OsmosisPoolMetrics:
      type: object
      properties:
        apy:
          type: string
          format: byte
        tvl:
          type: string
          format: byte
    quasarlabs.quasarnode.qoracle.OsmosisRequestState:
      type: object
      properties:
        packet_sequence:
          type: string
          format: uint64
        acknowledged:
          type: boolean
        failed:
          type: boolean
        updated_at_height:
          type: string
          format: int64
    quasarlabs.quasarnode.qoracle.Params:
      type: object
      properties:
        bandchain_params:
          type: object
          properties:
            oracle_ibc_params:
              type: object
              properties:
                authorized_channel:
                  type: string
                timeout_height:
                  type: object
                  properties:
                    revision_number:
                      type: string
                      format: uint64
                      title: the revision that the client is currently on
                    revision_height:
                      type: string
                      format: uint64
                      title: the height within the given revision
                  description: >-
                    Normally the RevisionHeight is incremented at each height
                    while keeping

                    RevisionNumber the same. However some consensus algorithms may choose to

                    reset the height in certain conditions e.g. hard forks, state-machine

                    breaking changes In these cases, the RevisionNumber is incremented so that

                    height continues to be monitonically increasing even as the RevisionHeight

                    gets reset
                  title: >-
                    Height is a monotonically increasing data type

                    that can be compared against another Height for the purposes of updating and

                    freezing clients
                timeout_timestamp:
                  type: string
                  format: uint64
            coin_rates_params:
              type: object
              properties:
                epoch_identifier:
                  type: string
                symbols:
                  type: array
                  items:
                    type: string
                script_params:
                  type: object
                  properties:
                    script_id:
                      type: string
                      format: uint64
                    ask_count:
                      type: string
                      format: uint64
                    min_count:
                      type: string
                      format: uint64
                    fee_limit:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the custom method

                          signatures required by gogoproto.
                    prepare_gas:
                      type: string
                      format: uint64
                    execute_gas:
                      type: string
                      format: uint64
        osmosis_params:
          type: object
          properties:
            icq_params:
              type: object
              properties:
                authorized_channel:
                  type: string
                timeout_height:
                  type: object
                  properties:
                    revision_number:
                      type: string
                      format: uint64
                      title: the revision that the client is currently on
                    revision_height:
                      type: string
                      format: uint64
                      title: the height within the given revision
                  description: >-
                    Normally the RevisionHeight is incremented at each height
                    while keeping

                    RevisionNumber the same. However some consensus algorithms may choose to

                    reset the height in certain conditions e.g. hard forks, state-machine

                    breaking changes In these cases, the RevisionNumber is incremented so that

                    height continues to be monitonically increasing even as the RevisionHeight

                    gets reset
                  title: >-
                    Height is a monotonically increasing data type

                    that can be compared against another Height for the purposes of updating and

                    freezing clients
                timeout_timestamp:
                  type: string
                  format: uint64
            epoch_identifier:
              type: string
        denom_price_mappings:
          type: array
          items:
            type: object
            properties:
              denom:
                type: string
              oracle_denom:
                type: string
              multiplier:
                type: string
        oneHopDenomMap:
          type: array
          items:
            type: object
            properties:
              originName:
                type: string
              quasar:
                type: string
              osmo:
                type: string
      description: Params defines the parameters for the module.
    quasarlabs.quasarnode.qoracle.QueryOraclePricesResponse:
      type: object
      properties:
        prices:
          type: array
          items:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: >-
              DecCoin defines a token with a denomination and a decimal amount.


              NOTE: The amount field is an Dec which implements the custom method

              signatures required by gogoproto.
        updated_at_height:
          type: string
          format: int64
    quasarlabs.quasarnode.qoracle.QueryOsmosisChainParamsResponse:
      type: object
      properties:
        epochs_info:
          type: array
          items:
            type: object
            properties:
              identifier:
                type: string
                description: identifier is a unique reference to this particular timer.
              start_time:
                type: string
                format: date-time
                description: >-
                  start_time is the time at which the timer first ever ticks.

                  If start_time is in the future, the epoch will not begin until the start

                  time.
              duration:
                type: string
                description: |-
                  duration is the time in between epoch ticks.
                  In order for intended behavior to be met, duration should
                  be greater than the chains expected block time.
                  Duration must be non-zero.
              current_epoch:
                type: string
                format: int64
                description: >-
                  current_epoch is the current epoch number, or in other words,

                  how many times has the timer 'ticked'.

                  The first tick (current_epoch=1) is defined as

                  the first block whose blocktime is greater than the EpochInfo start_time.
              current_epoch_start_time:
                type: string
                format: date-time
                description: >-
                  current_epoch_start_time describes the start time of the
                  current timer

                  interval. The interval is (current_epoch_start_time,

                  current_epoch_start_time + duration] When the timer ticks, this is set to

                  current_epoch_start_time = last_epoch_start_time + duration only one timer

                  tick for a given identifier can occur per block.


                  NOTE! The current_epoch_start_time may diverge significantly from the

                  wall-clock time the epoch began at. Wall-clock time of epoch start may be

                  >> current_epoch_start_time. Suppose current_epoch_start_time = 10,

                  duration = 5. Suppose the chain goes offline at t=14, and comes back online

                  at t=30, and produces blocks at every successive time. (t=31, 32, etc.)

                  * The t=30 block will start the epoch for (10, 15]

                  * The t=31 block will start the epoch for (15, 20]

                  * The t=32 block will start the epoch for (20, 25]

                  * The t=33 block will start the epoch for (25, 30]

                  * The t=34 block will start the epoch for (30, 35]

                  * The **t=36** block will start the epoch for (35, 40]
              epoch_counting_started:
                type: boolean
                description: >-
                  epoch_counting_started is a boolean, that indicates whether
                  this

                  epoch timer has began yet.
              current_epoch_start_height:
                type: string
                format: int64
                title: >-
                  current_epoch_start_height is the block height at which the
                  current epoch

                  started. (The block height at which the timer last ticked)
            description: |-
              EpochInfo is a struct that describes the data going into
              a timer defined by the x/epochs module.
        lockable_durations:
          type: array
          items:
            type: string
            format: int64
        mint_params:
          type: object
          properties:
            mint_denom:
              type: string
              description: mint_denom is the denom of the coin to mint.
            genesis_epoch_provisions:
              type: string
              description: genesis_epoch_provisions epoch provisions from the first epoch.
            epoch_identifier:
              type: string
              description: epoch_identifier mint epoch identifier e.g. (day, week).
            reduction_period_in_epochs:
              type: string
              format: int64
              description: |-
                reduction_period_in_epochs the number of epochs it takes
                to reduce the rewards.
            reduction_factor:
              type: string
              description: |-
                reduction_factor is the reduction multiplier to execute
                at the end of each period set by reduction_period_in_epochs.
            distribution_proportions:
              description: >-
                distribution_proportions defines the distribution proportions of
                the minted

                denom. In other words, defines which stakeholders will receive the minted

                denoms and how much.
              type: object
              properties:
                staking:
                  type: string
                  description: >-
                    staking defines the proportion of the minted mint_denom that
                    is to be

                    allocated as staking rewards.
                pool_incentives:
                  type: string
                  description: >-
                    pool_incentives defines the proportion of the minted
                    mint_denom that is

                    to be allocated as pool incentives.
                developer_rewards:
                  type: string
                  description: >-
                    developer_rewards defines the proportion of the minted
                    mint_denom that is

                    to be allocated to developer rewards address.
                community_pool:
                  type: string
                  description: >-
                    community_pool defines the proportion of the minted
                    mint_denom that is

                    to be allocated to the community pool.
            weighted_developer_rewards_receivers:
              type: array
              items:
                type: object
                properties:
                  address:
                    type: string
                  weight:
                    type: string
                description: >-
                  WeightedAddress represents an address with a weight assigned
                  to it.

                  The weight is used to determine the proportion of the total minted

                  tokens to be minted to the address.
              description: >-
                weighted_developer_rewards_receivers is the address to receive
                developer

                rewards with weights assignedt to each address. The final amount that each

                address receives is: epoch_provisions *

                distribution_proportions.developer_rewards * Address's Weight.
            minting_rewards_distribution_start_epoch:
              type: string
              format: int64
              title: >-
                minting_rewards_distribution_start_epoch start epoch to
                distribute minting

                rewards
          description: Params holds parameters for the x/mint module.
        mint_epoch_provisions:
          type: string
        distr_info:
          type: object
          properties:
            total_weight:
              type: string
            records:
              type: array
              items:
                type: object
                properties:
                  gauge_id:
                    type: string
                    format: uint64
                  weight:
                    type: string
    quasarlabs.quasarnode.qoracle.QueryOsmosisIncentivizedPoolsResponse:
      type: object
      properties:
        incentivized_pools:
          type: array
          items:
            type: object
            properties:
              pool_id:
                type: string
                format: uint64
              lockable_duration:
                type: string
              gauge_id:
                type: string
                format: uint64
    quasarlabs.quasarnode.qoracle.QueryOsmosisPoolsResponse:
      type: object
      properties:
        pools:
          type: array
          items:
            type: object
            properties:
              pool_info:
                type: object
                properties:
                  address:
                    type: string
                  id:
                    type: string
                    format: uint64
                  pool_params:
                    type: object
                    properties:
                      swap_fee:
                        type: string
                      exit_fee:
                        type: string
                      smooth_weight_change_params:
                        type: object
                        properties:
                          start_time:
                            type: string
                            format: date-time
                            description: >-
                              The start time for beginning the weight change.

                              If a parameter change / pool instantiation leaves this blank,

                              it should be generated by the state_machine as the current time.
                          duration:
                            type: string
                            title: Duration for the weights to change over
                          initial_pool_weights:
                            type: array
                            items:
                              type: object
                              properties:
                                token:
                                  description: >-
                                    Coins we are talking about,

                                    the denomination must be unique amongst all PoolAssets for this pool.
                                  type: object
                                  properties:
                                    denom:
                                      type: string
                                    amount:
                                      type: string
                                weight:
                                  type: string
                                  title: Weight that is not normalized. This weight must be less than 2^50
                              description: >-
                                Pool asset is an internal struct that combines
                                the amount of the

                                token in the pool, and its balancer weight.

                                This is an awkward packaging of data,

                                and should be revisited in a future state migration.
                            description: >-
                              The initial pool weights. These are copied from
                              the pool's settings

                              at the time of weight change instantiation.

                              The amount PoolAsset.token.amount field is ignored if present,

                              future type refactorings should just have a type with the denom & weight

                              here.
                          target_pool_weights:
                            type: array
                            items:
                              type: object
                              properties:
                                token:
                                  description: >-
                                    Coins we are talking about,

                                    the denomination must be unique amongst all PoolAssets for this pool.
                                  type: object
                                  properties:
                                    denom:
                                      type: string
                                    amount:
                                      type: string
                                weight:
                                  type: string
                                  title: Weight that is not normalized. This weight must be less than 2^50
                              description: >-
                                Pool asset is an internal struct that combines
                                the amount of the

                                token in the pool, and its balancer weight.

                                This is an awkward packaging of data,

                                and should be revisited in a future state migration.
                            description: >-
                              The target pool weights. The pool weights will
                              change linearly with respect

                              to time between start_time, and start_time + duration. The amount

                              PoolAsset.token.amount field is ignored if present, future type

                              refactorings should just have a type with the denom & weight here.
                        title: >-
                          Parameters for changing the weights in a balancer pool
                          smoothly from

                          a start weight and end weight over a period of time.

                          Currently, the only smooth change supported is linear changing between

                          the two weights, but more types may be added in the future.

                          When these parameters are set, the weight w(t) for pool time `t` is the

                          following:
                            t <= start_time: w(t) = initial_pool_weights
                            start_time < t <= start_time + duration:
                              w(t) = initial_pool_weights + (t - start_time) *
                                (target_pool_weights - initial_pool_weights) / (duration)
                            t > start_time + duration: w(t) = target_pool_weights
                    description: >-
                      PoolParams defined the parameters that will be managed by
                      the pool

                      governance in the future. This params are not managed by the chain

                      governance. Instead they will be managed by the token holders of the pool.

                      The pool's token holders are specified in future_pool_governor.
                  future_pool_governor:
                    type: string
                    title: >-
                      This string specifies who will govern the pool in the
                      future.

                      Valid forms of this are:

                      {token name},{duration}

                      {duration}

                      where {token name} if specified is the token which determines the

                      governor, and if not specified is the LP token for this pool.duration is

                      a time specified as 0w,1w,2w, etc. which specifies how long the token

                      would need to be locked up to count in governance. 0w means no lockup.

                      TODO: Further improve these docs
                  total_shares:
                    title: sum of all LP tokens sent out
                    type: object
                    properties:
                      denom:
                        type: string
                      amount:
                        type: string
                    description: >-
                      Coin defines a token with a denomination and an amount.


                      NOTE: The amount field is an Int which implements the custom method

                      signatures required by gogoproto.
                  pool_assets:
                    type: array
                    items:
                      type: object
                      properties:
                        token:
                          description: >-
                            Coins we are talking about,

                            the denomination must be unique amongst all PoolAssets for this pool.
                          type: object
                          properties:
                            denom:
                              type: string
                            amount:
                              type: string
                        weight:
                          type: string
                          title: Weight that is not normalized. This weight must be less than 2^50
                      description: >-
                        Pool asset is an internal struct that combines the
                        amount of the

                        token in the pool, and its balancer weight.

                        This is an awkward packaging of data,

                        and should be revisited in a future state migration.
                    title: >-
                      These are assumed to be sorted by denomiation.

                      They contain the pool asset and the information about the weight
                  total_weight:
                    type: string
                    title: sum of all non-normalized pool weights
              metrics:
                type: object
                properties:
                  apy:
                    type: string
                    format: byte
                  tvl:
                    type: string
                    format: byte
        pagination:
          type: object
          properties:
            next_key:
              type: string
              format: byte
              description: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently. It will be empty if
                there are no more results.
            total:
              type: string
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
          description: |-
            PageResponse is to be embedded in gRPC response messages where the
            corresponding request message has used PageRequest.

             message SomeResponse {
                     repeated Bar results = 1;
                     PageResponse page = 2;
             }
    quasarlabs.quasarnode.qoracle.QueryParamsResponse:
      type: object
      properties:
        params:
          description: params holds all the parameters of this module.
          type: object
          properties:
            bandchain_params:
              type: object
              properties:
                oracle_ibc_params:
                  type: object
                  properties:
                    authorized_channel:
                      type: string
                    timeout_height:
                      type: object
                      properties:
                        revision_number:
                          type: string
                          format: uint64
                          title: the revision that the client is currently on
                        revision_height:
                          type: string
                          format: uint64
                          title: the height within the given revision
                      description: >-
                        Normally the RevisionHeight is incremented at each
                        height while keeping

                        RevisionNumber the same. However some consensus algorithms may choose to

                        reset the height in certain conditions e.g. hard forks, state-machine

                        breaking changes In these cases, the RevisionNumber is incremented so that

                        height continues to be monitonically increasing even as the RevisionHeight

                        gets reset
                      title: >-
                        Height is a monotonically increasing data type

                        that can be compared against another Height for the purposes of updating and

                        freezing clients
                    timeout_timestamp:
                      type: string
                      format: uint64
                coin_rates_params:
                  type: object
                  properties:
                    epoch_identifier:
                      type: string
                    symbols:
                      type: array
                      items:
                        type: string
                    script_params:
                      type: object
                      properties:
                        script_id:
                          type: string
                          format: uint64
                        ask_count:
                          type: string
                          format: uint64
                        min_count:
                          type: string
                          format: uint64
                        fee_limit:
                          type: array
                          items:
                            type: object
                            properties:
                              denom:
                                type: string
                              amount:
                                type: string
                            description: >-
                              Coin defines a token with a denomination and an
                              amount.


                              NOTE: The amount field is an Int which implements the custom method

                              signatures required by gogoproto.
                        prepare_gas:
                          type: string
                          format: uint64
                        execute_gas:
                          type: string
                          format: uint64
            osmosis_params:
              type: object
              properties:
                icq_params:
                  type: object
                  properties:
                    authorized_channel:
                      type: string
                    timeout_height:
                      type: object
                      properties:
                        revision_number:
                          type: string
                          format: uint64
                          title: the revision that the client is currently on
                        revision_height:
                          type: string
                          format: uint64
                          title: the height within the given revision
                      description: >-
                        Normally the RevisionHeight is incremented at each
                        height while keeping

                        RevisionNumber the same. However some consensus algorithms may choose to

                        reset the height in certain conditions e.g. hard forks, state-machine

                        breaking changes In these cases, the RevisionNumber is incremented so that

                        height continues to be monitonically increasing even as the RevisionHeight

                        gets reset
                      title: >-
                        Height is a monotonically increasing data type

                        that can be compared against another Height for the purposes of updating and

                        freezing clients
                    timeout_timestamp:
                      type: string
                      format: uint64
                epoch_identifier:
                  type: string
            denom_price_mappings:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  oracle_denom:
                    type: string
                  multiplier:
                    type: string
            oneHopDenomMap:
              type: array
              items:
                type: object
                properties:
                  originName:
                    type: string
                  quasar:
                    type: string
                  osmo:
                    type: string
      description: QueryParamsResponse is response type for the Query/Params RPC method.
    quasarlabs.quasarnode.qoracle.QueryStateResponse:
      type: object
      properties:
        coin_rates_state:
          type: object
          properties:
            call_data:
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all types that they

                    expect it to use in the context of Any. However, for URLs which use the

                    scheme `http`, `https`, or no scheme, one can optionally set up a type

                    server that maps type URLs to message definitions as follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the official

                    protobuf release, and it is not used for type URLs beginning with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme) might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: Must be a valid serialized protocol buffer of the above specified
                    type.
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in the form

                of utility functions or additional generated methods of the Any type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := anypb.New(foo)
                     if err != nil {
                       ...
                     }
                     ...
                     foo := &pb.Foo{}
                     if err := any.UnmarshalTo(foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default use

                'type.googleapis.com/full.type.name' as the type URL and the unpack

                methods only use the fully qualified type name after the last '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON


                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
            request_packet_sequence:
              type: string
              format: uint64
            oracle_request_id:
              type: string
              format: uint64
            result_packet_sequence:
              type: string
              format: uint64
            result:
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all types that they

                    expect it to use in the context of Any. However, for URLs which use the

                    scheme `http`, `https`, or no scheme, one can optionally set up a type

                    server that maps type URLs to message definitions as follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the official

                    protobuf release, and it is not used for type URLs beginning with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme) might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: Must be a valid serialized protocol buffer of the above specified
                    type.
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in the form

                of utility functions or additional generated methods of the Any type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := anypb.New(foo)
                     if err != nil {
                       ...
                     }
                     ...
                     foo := &pb.Foo{}
                     if err := any.UnmarshalTo(foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default use

                'type.googleapis.com/full.type.name' as the type URL and the unpack

                methods only use the fully qualified type name after the last '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON


                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
            failed:
              type: boolean
            updated_at_height:
              type: string
              format: int64
        osmosis_params_request_state:
          type: object
          properties:
            packet_sequence:
              type: string
              format: uint64
            acknowledged:
              type: boolean
            failed:
              type: boolean
            updated_at_height:
              type: string
              format: int64
        osmosis_incentivized_pools_state:
          type: object
          properties:
            packet_sequence:
              type: string
              format: uint64
            acknowledged:
              type: boolean
            failed:
              type: boolean
            updated_at_height:
              type: string
              format: int64
        osmosis_pools_state:
          type: object
          properties:
            packet_sequence:
              type: string
              format: uint64
            acknowledged:
              type: boolean
            failed:
              type: boolean
            updated_at_height:
              type: string
              format: int64
